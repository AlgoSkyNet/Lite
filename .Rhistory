?navlistPanel
?selectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?div
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
get.collapsed.column = function(column,to.collapse){
new.level = paste(to.collapse,collapse=".")
indices = which(column%in%to.collapse)
if(length(indexes)>0){
column[indices] = new.level
}
column
}
get.collapsed.column(sample(letters,4),c("a","b","c"))
get.collapsed.column = function(column,to.collapse){
new.level = paste(to.collapse,collapse=".")
indices = which(column%in%to.collapse)
if(length(indices)>0){
column[indices] = new.level
}
column
}
get.collapsed.column(sample(letters,4),c("a","b","c"))
get.collapsed.column(sample(letters,45),c("a","b","c"))
get.collapsed.column(sample(letters,45,replace=T),c("a","b","c"))
get.collapsed.column(sample(as.factor(letters),45,replace=T),c("a","b","c"))
as.factor(letters)
sample(as.factor(letters),45,replace=T)
get.collapsed.column(sample(as.character(as.factor(letters)),45,replace=T),c("a","b","c"))
get.collapsed.column = function(column,to.collapse){
column = as.charcter(column)
new.level = paste(to.collapse,collapse=".")
indices = which(column%in%to.collapse)
if(length(indices)>0){
column[indices] = new.level
}
as.factor(column)
}
get.collapsed.column(sample(as.factor(letters),45,replace=T),c("a","b","c"))
get.collapsed.column = function(column,to.collapse){
column = as.character(column)
new.level = paste(to.collapse,collapse=".")
indices = which(column%in%to.collapse)
if(length(indices)>0){
column[indices] = new.level
}
as.factor(column)
}
get.collapsed.column(sample(as.factor(letters),45,replace=T),c("a","b","c"))
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(data)
input$select.collapse.column = "rank"
input=list()
input$select.collapse.column = "rank"
input$select.collapse.item = c("Prof","AsstProf")
text = ""
!is.null(input$select.collapse.column)&&!""%in%input$select.collapse.column&&
!is.null(input$select.collapse.item)&&!""%in%input$select.collapse.item
print(table(get.collapsed.column(data[,input$select.collapse.column],input$select.collapse.item)))
shiny::runApp()
shiny::runApp()
?updateSelectInput
?updateTextInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?updateSelectInput
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(data)
dafr = data
column = "rank"
levels(dafr[,"rank"])
levels.new = c(,"Prof","AsstProf","AsocProf")
levels.new = c("Prof","AsstProf","AsocProf")
level(dafr[,column]) = levels.new
levels(dafr[,column]) = levels.new
levels(dafr[,column])
shiny::runApp()
shiny::runApp()
dafr = data
table(dafr[,column])
shiny::runApp()
head(data)
shiny::runApp()
head(data)
dafr = data
table(dafr[,column])
levels(dafr[,column])
levels(dafr[,column]) = levels.new
levels(dafr[,column])
table(dafr[,column])
dafr = data
table(dafr[,column])
levels(dafr[,column])
dafr[,column] = factor(dafr[,column],levels=levels.new)
table(dafr[,column])
levels.new
dafr = data
table(dafr[,column])
levels.new
levels.new = c("Prof"     "AsstProf" "AssocProf")
levels.new = c("Prof","AsstProf","AssocProf")
dafr[,column] = factor(dafr[,column],levels=levels.new)
table(dafr[,column])
table(data[,column])
shiny::runApp()
?order
shiny::runApp()
?uiOutput
?textInput
shiny::runApp()
shiny::runApp()
factor(c("a","a","b","c","a","d","d"))
test=factor(c("a","a","b","c","a","d","d"))
test
test[which(test%in%"a")]
test[which(test%in%"a")] = "e"
test=factor(c("a","a","b","c","a","d","d"))
test[which(test%in%"a")] = "e"
temp
head(dafr)
column
new.levels = c('a','b','c')
temp = as.character(dafr[,column])
temp
i=1
length(levels(dafr[,column]))
temp[which(dafr[,column]%in%dafr[,column][i])] = new.levels[i]
temp
i=2
temp[which(dafr[,column]%in%dafr[,column][i])] = new.levels[i]
temp
temp = as.character(dafr[,column])
temp
i=1
temp = temp[which(dafr[,column]%in%dafr[,column][i])] = new.levels[i]
temp
temp = as.character(dafr[,column])
temp[which(dafr[,column]%in%dafr[,column][i])] = new.levels[i]
temp
i=2
temp[which(dafr[,column]%in%dafr[,column][i])] = new.levels[i]
temp
temp = as.character(dafr[,column])
i
i=1
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
temp
i=2
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
temp
i=3
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
temp
factor(temp,levels=new.levels)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(data)
dafr=data
column
new.levels = paste(levels(dafr[,column]),"i,sep="")
)
)
)
))))
g
sfsds
-
""
new.levels = paste(levels(dafr[,column]),"i",sep="")
new.levels
temp = as.character(dafr[,column])
temp
for(i in length(levels(dafr[,column]))){
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
}
temp
i
levels(dafr[,column])[i]
which(dafr[,column]%in%levels(dafr[,column])[i])
which(dafr[,column]%in%levels(dafr[,column])[i])
dafr[,column]
which(dafr[,column]%in%levels(dafr[,column])[i])
temp = as.character(dafr[,column])
i=1
levels(dafr[,column])[i])
levels(dafr[,column])[i]
new.levels[i]
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
head(temp)
i=2
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
head(temp)
i=3
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
head(temp)
head(factor(temp,levels=new.levels))
dafr[,column] = factor(temp,levels=new.levels)
dafr[,column]
shiny::runApp()
shiny::runApp()
shiny::runApp()
input = list
input = list()
input$numeric_input2=12
input$numeric_input3=12
input$bootstrap_check=T
is.convertable.numeric(input$numeric_input2)&&
is.convertable.numeric(input$numeric_input3)&&
as.numeric(input$numeric_input2)<=nrow(data)&&
(((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check))
is.convertable.numeric(input$numeric_input2)
is.convertable.numeric(input$numeric_input3)
as.numeric(input$numeric_input2)<=nrow(data)
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check))
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check))
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check))
(((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check))
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&
!input$bootstrap_check)
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check)
(as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))
(as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)
!input$bootstrap_check)
!input$bootstrap_check
input$bootstrap_check
(as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)
shiny::runApp()
is.convertable.numeric(input$numeric_input2)
is.convertable.numeric(input$numeric_input3)
as.numeric(input$numeric_input2)<=nrow(data)
(((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)))
(((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check)|
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)))
((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&
input$bootstrap_check)
(as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)
input$numeric_input2
as.numeric(input$numeric_input3)
input$bootstrap_check
nrow(data)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
head(data)
input$select.reorder.item = c("AsstProf","AssocProf")
items = input$select.reorder.item
print(items)
!is.null(items)&!is.null(input$select.reorder.column)
input$select.reorder.column="rank"
!is.null(items)&!is.null(input$select.reorder.column)
column = data[,input$select.reorder.column]
column
length(items)<length(column)
length(column)
length(items)
length(items)<length(unique(column))
unique(column)
unique(data[,input$select.reorder.column]
)
sort(unique(data[,input$select.reorder.column])
[which(!unique(data[,input$select.reorder.column])%in%items)])
not.in = sort(unique(data[,input$select.reorder.column])
[which(!unique(data[,input$select.reorder.column])%in%items)])
levels.new = c(items,not.in)
levels.new
not.in
not.in
as.character(not.in)
levels.new = c(items,as.character(not.in))
levels.new
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
!is.null(data)&&!is.null(ncol(data))&&ncol(data)>0
choices1 = get.categorical.column.names()
choices1
shiny::runApp()
new.levels = ("AsstProfi","AssocProfi","Profi")
new.levels = c("AsstProfi","AssocProfi","Profi")
column="rank"
dafr=data
temp = as.character(dafr[,column])
temp
shiny::runApp()
dafr=data
temp = as.character(dafr[,column])
temp
length(levels(dafr[,column])
)
i=1
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
table(temp)
i=2
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
table(temp)
i=3
temp[which(dafr[,column]%in%levels(dafr[,column])[i])] = new.levels[i]
table(temp)
factor(temp,levels=new.levels)
dafr[,column] = factor(temp,levels=new.levels)
dafr[,column]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?verbatimTextOutput
shiny::runApp()
shiny::runApp()
paste(c("a","b","c"),c(1,2,3))
paste(c("a","b","c"),c(1,2,3),c(4,5,6))
combine.levels = function(dafr,columns){
do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr),sep=".")
}
head(data)
columns=c("rank","discipline","sex")
combine.levels(data,columns)
?paste
?do.call
combine.levels = function(dafr,columns){
do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr),sep=".")
}
combine.levels(data,columns)
combine.levels = function(dafr,columns){
do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr))
}
combine.levels(data,columns)
combine.levels = function(dafr,columns){
do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr))
}
strsplit
?strsplit
?grep
new.column
new.column = do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr))
new.column
sub(" ",".",new.column)
new.column = do.call(paste,lapply(columns,function(name,d){
d[,name]
},dafr))
new.column
gsub(" ",".",new.column)
shiny::runApp()
shiny::runApp()
data
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
?uiOutput
?htmlOutput
htmlOutput("summary")
tags$ul(
htmlOutput("summary", container = tags$li, class = "custom-li-output")
)
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
installed.packages()
head(installed.packages())
inst = installed.packages()
dim(inst)
colnames(inst)
head(inst[,1:3])
inst["shiny",1:3]
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
