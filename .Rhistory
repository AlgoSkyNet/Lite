}else{
NULL
}
},dafr)))
if(!is.null(temp)){
colnames(temp) = paste("reverse_coding",
columns[unlist(lapply(1:ncol(dafr),
function(i,d){
is.numeric(d[,i])
},dafr))],sep=".")
}
temp
}
median.split.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
nums = unlist(lapply(1:ncol(dafr),function(index,dafr){is.numeric(dafr[,index])},dafr))
dafr = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
med = median(d[,index],na.rm=T)
ret = rep("high",length(d[,index]))
ret[which(d[,index]<=med)] = "low"
ret
}else{
NULL
}
},dafr)),stringsAsFactors=T)
colnames(dafr) = paste("median_split",columns[nums],sep="_")
dafr
}
standardize.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
dafr = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
(d[,index]-mean(d[,index],na.rm=T))/sd(d[,index],na.rm=T)
}else{
(as.numeric(factor(d[,index]))
-mean(as.numeric(factor(d[,index])),na.rm=T))/
sd(as.numeric(factor(d[,index])),na.rm=T)
}
},dafr)))
colnames(dafr) = paste("standardize",columns,sep=".")
dafr
}
center.transform = function(dafr,columns){
data = as.data.frame(dafr)
temp = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
d[,index]-mean(d[,index])
}else{
as.numeric(factor(d[,index]))-mean(as.numeric(factor(d[,index])))
}
},dafr)))
colnames(temp) = paste("center",columns,sep=".")
temp
}
divide.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
if(is.null(dafr)){
return(NULL)
}else{
if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))==1){
temp = as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))])
colnames(temp) = colnames(data)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},data))]
}else if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},data))]))>1){
temp = as.data.frame(divide(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])},dafr))]))
colnames(temp) = paste0("divide.",
paste(colnames(dafr)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))],collapse="."))
}else{
return(NULL)
}
}
temp
}
divide = function(dafr){
dafr = dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]
dafr = as.data.frame(dafr)
if(ncol(dafr)==1){
dafr[,1]
}else{
start = dafr[,1]
for(col in 2:ncol(dafr)){
start = start/dafr[,col]
}
start
}
}
multiply.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
if(is.null(dafr)){
return(NULL)
}else{
if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))==1){
temp = as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))])
colnames(temp) = colnames(dafr)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]
}else if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))>1){
temp = as.data.frame(multiply(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))
colnames(temp) = paste0("multiply.",paste(colnames(dafr)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))],collapse="."))
}else{
return(NULL)
}
}
temp
}
multiply = function(dafr){
dafr = dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]
dafr = as.data.frame(dafr)
if(ncol(dafr)==1){
dafr[,1]
}else{
start = dafr[,1]
for(col in 2:ncol(dafr)){
start = start*dafr[,col]
}
start
}
}
subtract.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
if(is.null(dafr)){
return(NULL)
}else{
if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))==1){
temp = as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))])
colnames(temp) = colnames(dafr)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]
}else if(ncol(as.data.frame(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))>1){
temp = as.data.frame(subtract(dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]))
colnames(temp) = paste0("subtract.",paste(colnames(dafr)[unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))],collapse="."))
}else{
return(NULL)
}
}
temp
}
subtract = function(dafr){
dafr = dafr[,unlist(lapply(1:ncol(dafr),function(index,d){
is.numeric(d[,index])
},dafr))]
dafr = as.data.frame(dafr)
if(ncol(dafr)==1){
dafr[,1]
}else{
start = dafr[,1]
for(col in 2:ncol(dafr)){
start = start-dafr[,col]
}
start
}
}
add.transform  = function(temp,columns){
temp = as.data.frame(temp)
colnames(temp) = columns
if(is.null(temp)){
return(NULL)
}else{
ret = as.data.frame(temp[,unlist(lapply(1:ncol(temp),function(index,d){
is.numeric(d[,index])
},temp))])
if(ncol(ret)>1){
ret = as.data.frame(apply(ret,1,function(row){sum(row)}))
colnames(ret) = paste0("add_",paste(colnames(temp),collapse="_"))
}else{
return(NULL)
}
}
ret
}
# returns the transformed columns and the original data as
# dataframe (cbind(data,<transformed columns>)).
transform.perform = function(dafr,type,columns){
temp = transform.get.temp(dafr,type,columns)
if(!is.null(temp)){
temp = cbind(dafr,temp)
}
temp
}
# returns the transformed columns and the original columns as
# dataframe (cbind(<original columns>,<transformed columns>)).
transform.tempTable = function(dafr,type,columns){
temp1 = as.data.frame(dafr[,which(colnames(dafr)%in%columns)])
temp2 = transform.get.temp(dafr,type,columns)
if(!is.null(temp2)){
temp1 = cbind(temp1,temp2)
}
temp1
}
# transorms the columns named columns in data with the selected
# type (type) of transformation.
transform.get.temp = function(dafr,type,columns){
temp = NULL
if (!is.null(columns) && type%in%"log"){
temp = log.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"add"){
temp = add.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"subtract"){
temp = subtract.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"multiply"){
temp = multiply.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"divide"){
temp = divide.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"root"){
temp = root.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"square"){
temp = square.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"abs"){
temp = abs.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"center"){
temp = center.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"standardize"){
temp = standardize.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"median split"){
temp = median.split.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"reverse-coding"){
temp = reverse.coding.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"copy"){
temp = copy.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"change sign"){
temp = change.sign.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%"change to factor"){
temp = change.factor.transform(dafr[,columns],columns)
} else if (!is.null(columns)&type%in%""){
temp = NULL
}
temp
}
log.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
temp = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,dafr){
if(is.numeric(dafr[,index])){
log(dafr[,index])
}else{
NULL
}
},dafr)))
if(!is.null(temp)&&dim(temp)[1]>0&&dim(temp)[2]>0){
colnames(temp) = unlist(lapply(1:ncol(dafr),function(index,dafr){
if(is.numeric(dafr[,index])){
paste0("log.",colnames(dafr)[index])
}else{
NULL
}
},dafr))
temp
}else{
NULL
}
}
root.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
temp = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
sqrt(d[,index])
}else{
NULL
}
},dafr)))
##  temp = as.data.frame(temp)
if(dim(temp)[1]>0&&dim(temp)[2]>0){
colnames(temp) = unlist(lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
paste0("root.",colnames(d)[index])
}else{
NULL
}
},dafr))
temp
}else{
NULL
}
}
square.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
temp = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
d[,index]^2
}else{
NULL
}
},dafr)))
##  temp = as.data.frame(temp)
if(dim(temp)[1]>0&&dim(temp)[2]>0){
colnames(temp) = unlist(lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
paste0("square.",colnames(d)[index])
}else{
NULL
}
},dafr))
temp
}else{
NULL
}
}
abs.transform = function(dafr,columns){
dafr = as.data.frame(dafr)
colnames(dafr) = columns
temp = as.data.frame(do.call(cbind,lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
abs(d[,index])
}else{
NULL
}
},dafr)))
#   temp = as.data.frame(temp)
if(dim(temp)[1]>0&&dim(temp)[2]>0){
colnames(temp) = unlist(lapply(1:ncol(dafr),function(index,d){
if(is.numeric(d[,index])){
paste0("abs.",colnames(d)[index])
}else{
NULL
}
},dafr))
temp
}else{
NULL
}
}
delete.old.files = function(data_dir,days){
if(length(list.files(paste0(data_dir,"/Imported")))>0){
unlink(list.files(paste0(data_dir,"/Imported"))
[difftime(Sys.time(),
file.info(list.files(
paste0(data_dir,"/Imported"),full.name=T))
[,"mtime"], units = "days")>days])
}
}
###  A function for displaying help messages.
help.display = function(title, id, file) {
HTML(paste("<div class='modal fade' id='", id, "' tabindex='-1' role='dialog' aria-labelledby='basicModal' aria-hidden='true'>
<div class='modal-dialog'>
<div class='modal-content'>
<div class='modal-header'>
<h4 class='modal-title' id='myModalLabel'>",title,"</h4>
</div>
<div class='modal-body'>",
markdownToHTML(
file = file,
options = c(""),
stylesheet = "www/empty.css"),
"</div>
<div class='modal-footer'>
</div>
</div>
</div>
</div>
<a href='#' class='btn btn-xs btn-success' data-toggle='modal' data-target='#", id, "'>Help</a>", sep = ""))
}
## reads a data set from a filename in the data directory
load.data = function(data_dir,fileID=NULL,path=NULL){
temp = NULL
full.name = list.files(data_dir,full.names=T,recursive=T)
if(!is.null(fileID)){
if(is.null(path)){
indexes = grep(paste(fileID,".",sep=""),full.name,fixed=T)
}else if(!is.null(path)&file.exists(path)){
full.name = path
indexes = 1
}else{
return(list(NULL,NULL))
}
if(length(indexes[1])>0){
ext = strsplit(full.name[indexes[1]],".",fixed=T)[[1]]
ext = ext[length(ext)]
if(!(tolower(ext)%in%c("rds","rda","rdata","csv","txt"))){
ext = strsplit(fileID,".",fixed=T)[[1]]
ext = ext[length(ext)]
}
if(!file.exists(full.name[indexes[1]])){
return(list(NULL,NULL))
}
if(tolower(ext)%in%"rds"){
temp = readRDS(file=full.name[indexes[1]])
}else if(tolower(ext)%in%"rda"|tolower(ext)%in%"rdata"){
name = load(full.name[indexes[1]])
temp = get(name)
}else if(tolower(ext)%in%"csv"){
temp = read.csv(full.name[indexes[1]])
}else if(tolower(ext)%in%"txt"){
temp = read.delim(full.name[indexes[1]])
}
}
}
if(is.null(fileID)){
list(NULL,temp)
}else{
list(basename(fileID),temp)
}
}
## returns directories in the data directory
get.data.dirs = function(data_dir){
list.files(data_dir,
include.dirs=T,
full.names=T)[file.info(paste(data_dir,
list.files(data_dir),
sep="/"))[,"isdir"]]
}
## returns a radioButton widget, for every filename in the dir.lable directory.
get.radio.list = function(dir.label,idlabel){
files = c()
files = list.files(dir.label,
recursive=T,
full.name=T)[!(file.info(list.files(dir.label,
recursive=T,
full.names=T))[,"isdir"])]
temp.files = strsplit(files,"/")
files = unlist(lapply(temp.files,
function(x,label){
paste(x[(which(x%in%label)+1):length(x)],collapse="==>")
},strsplit(dir.label,"/",fixed=T)[[1]][length(strsplit(dir.label,"/",fixed=T)[[1]])]))
ret=NULL
if(length(files)>0){
columns = lapply(1:length(files),
function(i,ns){
paste(strsplit(ns[i],".",fixed=T)[[1]][1:(length(strsplit(ns[i],".",fixed=T)[[1]])-1)],collapse=".")
},
basename(files))
ret=radioButtons(inputId=paste(basename(dir.label),idlabel,sep=""), label=basename(dir.label), choices=columns, selected=columns[1])
}
ret
}
change.file.ext = function(name,new.ext){
splity = strsplit(name,".",fixed=T)[[1]]
if(length(splity)>1){
splity = paste(paste(splity[1:(length(splity)-1)],collapse="."),new.ext,sep=".")
}else{
splity = paste0(splity,".",new.ext)
}
splity
}
get.vars = function(data_dir){
lines = c()
if(file.exists("VARS")){
lines = scan("VARS",what="character",sep="\n",quiet=T)
}
if(length(lines)>0){
invisible(lapply(lines,function(line){
if(length(strsplit(line,"#")[[1]])>0){
line=strsplit(line,"#")[[1]][1]
}
if(!""%in%line){
variable = gsub("^\\s+|\\s+$", "", strsplit(line,"=")[[1]])
if(length(variable)!=2){
message(paste("Format of variable:",paste(variable,collapse=" "),"\n is not valid.",sep=" "))
}else{
if(variable[1]%in%vars&&!""%in%variable[2]){
if(variable[1]%in%"data.dir"){
data_dir<<-variable[2]
}else if(variable[1]%in%"version"){
version<<-variable[2]
}
}
}
}
}))
}
}
get.quantiles = function(subx){
g1 = rep("",length(subx))
if(is.numeric(subx)){
quant = quantile(subx,na.rm=T)
g1[which(subx>=quant[1]&subx<quant[2])] = paste(round(quant[1],2),round(quant[2],2),sep="-")
g1[which(subx>=quant[2]&subx<quant[3])] = paste(round(quant[2],2),round(quant[3],2),sep="-")
g1[which(subx>=quant[3]&subx<xquant[4])] = paste(round(quant[3],2),round(quant[4],2),sep="-")
g1[which(subx>=quant[4]&subx<=quant[5])] = paste(round(quant[4],2),round(quant[5],2),sep="-")
g1 = as.factor(g1)
}
g1
}
