{
    "contents" : "###-------------------------------------###\n### Server Functions for iNZight Lite   ###\n###-------------------------------------###\n###\n### Date Created : January 10, 2015\n### Last Modified : March 23, 2015\n###\n### Please consult the comments before editing any code.\n### This file sources the ui files for each panel separately.\n\n###  We load the packages we require. This is done only ONCE per instance.\nlibrary(iNZightPlots)\nlibrary(iNZightTS)\nlibrary(markdown)\nlibrary(gpairs)\n\n### We write the server function.\nshinyServer(function(input, output, session) {\n    ##  Turn errors and warnings off\n    ## options(warn = -1, show.error.messages = FALSE)\n    \n    ##  Delete all imported files that are older than 1 day.\n    delete.old.files(1) # global.R\n    ## Load all panels into memory.\n    filepaths <- list.files(pattern = \"[.]R$\",\n                            path = \"gui-elements/\",\n                            full.names = TRUE)\n    sapply(filepaths, source)\n    ##---------------------##\n    ##  1. \"About\" Module  ##\n    ##---------------------##\n    source(\"panels/1_About/1_about-panel-ui.R\")\n    output$about.panel <- renderUI({\n        about.panel.ui()\n    })\n    ## \"Current data\" - presents currently selected data to user.\n    output$current.text <- renderText({\n        input$selector\n        if (!is.null(data)) {\n            paste0(\"Current selected data: \", data.name)\n        } else {\n            \"No data selected!\"\n        }\n    })\n    output$current.data <- renderUI({\n        current.data()\n    })\n    output$current <- renderDataTable({\n        input$selector\n        data\n    }, options =\n        list(lengthMenu = c(10, 30, 50), pageLength = 10,\n             columns.defaultContent = \"NA\", scrollX = TRUE))\n    ## \"Switch data\" - 'switches' to a different data set.\n    set_to_change_reac <- reactive({\n      if (is.null(input[[input$data_select]])){\n        \"No data to select!\"\n      } else {\n        temp = load.data(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]]\n                         [length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])[[2]]\n        if(is.null(temp[[1]])&is.null(temp[[2]])) {\n          \"No data to select!\"\n        }else{\n          paste0(\"Data selected: \", input[[input$data_select]])  \n        }\n      }\n    })\n\n    output$set_to_change <- renderText({\n        input[[input$data_select]]\n        set_to_change_reac()\n    })\n\n    col_names_show_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(data) && !is.null(data.name)) {\n            paste(\"Column names: \", paste(colnames(data), collapse = \", \"))\n        } else {\n            \"\"\n        }\n    })\n\n    output$col_names_show <- renderText({\n        input$change_set\n        input$selector\n        col_names_show_reac()\n    })\n\n    change_col_dim_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(data) && !is.null(data.name)) {\n            paste(\"Selected data number of columns is: \", dim(data)[2])\n        } else {\n            \"\"\n        }\n    })\n\n    output$col_dimension_show <- renderText({\n        input$change_set\n        input$selector\n        input$selector\n        change_col_dim_reac()\n    })\n\n    change_row_dim_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(data) && !is.null(data.name)) {\n            paste(\"Selected data number of rows is: \", dim(data)[1])\n        } else {\n            \"\"\n        }\n    })\n\n    output$row_dimension_show <- renderText({\n        input$change_set\n        input$selector\n        change_row_dim_reac()\n    })\n\n    change_data_name_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(data) && !is.null(data.name)) {\n            paste(\"Selected data set: \", data.name)\n        } else {\n            \"No data selected!\"\n        }\n    })\n\n    output$data_name_show <- renderText({\n        input$change_set\n        input$selector\n        change_data_name_reac()\n    })\n\n    observe({\n      if (!is.null(input$change_set)) {\n        isolate({\n          if (!is.null(input[[input$data_select]])&&input$change_set > 0) {\n            new.data =\n                load.data(strsplit(input[[input$data_select]],\n                                   \"==>\", fixed = TRUE)[[1]]\n                          [length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])\n            data.name <<- new.data[[1]]\n            new.data = new.data[[2]]\n            data <<- new.data\n            data.restore <<- data\n            loaded <<- F\n          }\n        })\n      }\n    })\n\n    ## loads and updates the switch data table Panel\n    output$switch.data.panel = renderUI({\n        input$selector\n        input$remove_set\n        isolate({\n          switch.data.panel()\n        })\n    })\n\n    output$temp_table = renderDataTable({\n      if (!is.null(input[[input$data_select]])){\n        load.data(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]][length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])[[2]]\n      } else {\n          NULL\n      }\n    }, options = list(lengthMenu = c(5, 30, 50), pageLength = 5,\n                      columns.defaultContent = \"NA\", scrollX = TRUE))\n\n    ##  Data -> load data (upload a data set)\n    \n    observe({\n      if(!is.null(input$import_set)&&input$import_set>0){\n        isolate({\n          if(!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])){\n            data <<- load.data(fileID = input$files[1, \"name\"], path = input$files[1, \"datapath\"])[[2]]\n            data.restore <<- data\n            data.name <<- input$files[1, \"name\"]\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            saveRDS(data,file = paste0(\"data/Imported/\", data.name, \".RDS\"))\n            print(input$files[1, \"datapath\"])\n            #unlink(input$files[1, \"datapath\"])\n          }else if (!is.null(input$URLtext)&&!input$URLtext%in%\"\"){\n            URL = input$URLtext\n            name = strsplit(URL,\"/\")[[1]]\n            name = strsplit(name[length(name)],\"?\",fixed=T)[[1]][1]\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            tryCatch({\n              download.file(url=URL,destfile=paste0(\"data/Imported/\",name),method=\"wget\")\n              temp = load.data(fileID = name, path = paste0(\"data/Imported/\",name))\n              data <<- temp[[2]]\n              data.restore <<- data\n              data.name <<- name\n            },error = function(e){\n              if(file.exists(paste0(\"data/Imported/\",name))){\n                unlink(paste0(\"data/Imported/\",name))\n              }\n              print(e)\n            },warning = function(w) {\n              print(w)\n            },finally = {})\n          }\n        })\n      }\n    })\n    \n    output$load.data.panel = renderUI({\n        input$selector\n#         input$import_set\n        isolate({\n          load.data.panel()\n        })\n    })\n\n    output$filetable <- renderDataTable({\n        input$selector\n        input$files\n        input$import_set\n        isolate({\n          if (!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])) {\n            load.data(fileID = input$files[1, \"name\"], path = input$files[1, \"datapath\"])[[2]]\n          } else if (!is.null(input$URLtext)&&!input$URLtext%in%\"\") {\n            URL = input$URLtext\n            name = strsplit(URL,\"/\")[[1]]\n            name = strsplit(name[length(name)],\"?\",fixed=T)[[1]][1]\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            if(file.exists(paste0(\"data/Imported/\",name))){\n              return(data)\n            }\n            NULL\n          }else{\n            NULL\n          }\n        })\n    }, options =\n        list(lengthMenu = c(5, 30, 50), pageLength = 5,\n             columns.defaultContent=\"NA\", scrollX = TRUE))\n\n    observe({\n      input$remove_set\n      isolate({\n        if(!is.null(input$remove_set)&&input$remove_set>0){\n          files = list.files(path = \"data/Imported\",\n                             pattern = input$Importedremove,\n                             full.names = TRUE)\n          if(!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])){\n            #unlink(input$files[1, \"datapath\"])\n          }\n          for(f in files){\n            if (file.exists(f)) {\n                unlink(f)\n            }\n          }\n        }\n      })\n    })\n\n    ##  Data -> Export data (export the currently used data set)\n\n    output$save.data.panel = renderUI({\n      input$selector\n      save.data.panel()\n    })\n\n    output$save_table = renderDataTable({\n      data\n    }, options =\n      list(lengthMenu = c(5, 30, 50), pageLength = 5,\n           columns.defaultContent = \"NA\", scrollX = TRUE))\n\n    output$downloadData <- downloadHandler(\n      filename = function() { \n        paste(data.name,\".\",input$select_filetype, sep='')\n      },\n      content = function(file) {\n        type = input$select_filetype\n        if(!is.null(data)){\n          if(type%in%\"txt\"&&!is.null(data)){\n            write.table(data, file, quote=F,row.names=F,sep=\"\\t\")\n          }else if(type%in%\"csv\"&&!is.null(data)){\n            write.table(data, file, quote=F,row.names=F,sep=\",\")\n          }else if(type%in%\"RData\"&&!is.null(data)){\n            save(data,file=file)\n          }else if(type%in%\"RDS\"&&!is.null(data)){\n            saveRDS(data,file=file)\n          }\n        }\n      }\n    )\n    \n    ##  Data -> remove data (Remove an imported data set)\n    output$remove.data.panel <- renderUI({\n      input$selector\n      input$remove_set\n      isolate({\n        remove.data.panel()\n      })\n    })\n\n    output$removetable <- renderDataTable({\n      if(!is.null(input$Importedremove)){\n        load.data(input$Importedremove)[[2]]\n      } else {\n          NULL\n      }\n    }, options =\n        list(lengthMenu = c(5, 30, 50), pageLength = 5,\n             columns.defaultContent = \"NA\", scrollX = TRUE))\n\n  ##  Modify data -> transform columns (Perform column transformations)\n  \n  transform.temp.table = reactive({\n    input$select.columns\n    input$select.transform\n    isolate({\n      transform.tempTable(input$select.transform,input$select.columns)\n    })\n  })\n  \n  perform.transform = reactive({\n  #       input$select.columns\n  #       input$select.transform\n    isolate({\n      transform.perform(input$select.transform,input$select.columns)\n    })\n  })\n  \n  observe({\n    input$transform\n    isolate({\n      if(!is.null(input$transform)&&input$transform>0){\n        data <<- perform.transform()\n        updateSelectInput(session, inputId=\"select.columns\", \n                          choices=colnames(data), selected=input$select.columns)\n        dataHasChanged <<- T\n      }\n    })\n  })\n  \n  output$table_part <- renderDataTable({\n    transform.temp.table()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n  \n  output$status = renderText({\n      input$transform\n      input$select.columns\n      input$select.transform\n      isolate({\n        transform.text = \"\"\n        if(dataHasChanged){\n          transform.text = \"The transformation  of the columns was successful.\"\n        }\n        dataHasChanged <<- F\n        transform.text\n      })\n  })\n  \n  output$transform.columns =renderUI({\n      input$selector\n  #         input$transform\n      transform.data.panel()\n  })\n\n  ##  Row operations (Perform row operations) --> Filter Dataset\n  \n  observe({\n    input$filter_data_perform\n    isolate({\n      if(!is.null(input$filter_data_perform)&&input$filter_data_perform>0){\n        if(input$select_filter%in%\"levels of categorical variable\"){\n          if(!input$select_categorical1%in%\"\"){\n            to.remove = which(data[,which(colnames(data)%in%input$select_categorical1)]%in%input$levels1)\n            if(length(to.remove)>0){\n              data <<- data[-to.remove,]\n              data[,which(colnames(data)%in%input$select_categorical1)] <<- \n                droplevels(data[,which(colnames(data)%in%input$select_categorical1)])\n              updateSelectInput(session=session,inputId=\"select_categorical1\",\n                                choices=c(\"\",get.categorical.column.names()),\n                                selected=1)\n              updateSelectInput(session=session,inputId=\"levels1\",\n                                choices=\"\",selected=1)\n            }\n          }\n        }else if(input$select_filter%in%\"numeric condition\"){\n          if(!input$select_numeric1%in%\"\"&!input$select_operation1%in%\"\"&is.convertable.numeric(input$numeric_input1)){\n            indexes.keep = 1:nrow(data)\n            if(input$select_operation1%in%\"<\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]<as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\">\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]>as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"<=\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]<=as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\">=\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]>=as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"==\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]==as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"!=\"){\n              indexes.keep = which((data[,which(colnames(data)%in%input$select_numeric1)]!=as.numeric(input$numeric_input1)))\n            }\n            data <<- data[indexes.keep,]\n          }\n        }else if(input$select_filter%in%\"row indices\"){\n          if(is.convertable.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])){\n            indices = as.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])\n            indices = indices[which(indices%in%(1:nrow(data)))]\n            if(length(indices)>0){\n              data <<- data[-indices,] \n            }\n          }\n        }else if(input$select_filter%in%\"randomly\"){\n          if(is.convertable.numeric(input$numeric_input2)&&\n               is.convertable.numeric(input$numeric_input3)&&\n               as.numeric(input$numeric_input2)<=nrow(data)&&\n               (((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&\n                   !input$bootstrap_check)|\n                  ((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&\n                     input$bootstrap_check))){\n            data <<- sample.data(df=data,\n                                 sampleSize=as.numeric(input$numeric_input2),\n                                 numSample=as.numeric(input$numeric_input3),\n                                 bootstrap=input$bootstrap_check)\n          }\n        }\n      }\n    })\n  })\n\n  output$message3 = renderPrint({\n    input$numeric_input2\n    input$numeric_input3\n    input$bootstrap_check\n    isolate({\n      if(is.convertable.numeric(input$numeric_input2)&&\n           is.convertable.numeric(input$numeric_input3)&&\n           as.numeric(input$numeric_input2)<=nrow(data)&&\n           (((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(data)&\n               !input$bootstrap_check)|\n              ((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(data)&\n                 input$bootstrap_check))){\n        cat(\"Size of sample: \",input$numeric_input2,\"\\n\",\n            \"Number of sample: \", input$numeric_input3)\n      }else{\n        cat(\"This input can not be processed. The data has \",\n            nrow(data),\" rows.\")\n      }\n    })\n  })\n\n  observe({\n    input$select_categorical1\n    isolate({\n      if(!is.null(input$select_categorical1)){\n        updateSelectInput(session=session,inputId=\"levels1\",\n                             choices=levels(data[,which(colnames(data)%in%input$select_categorical1)]))\n      }\n    })\n  })\n\n  output$message2 = renderPrint({\n    valid = is.convertable.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])\n    isolate({\n      if(!valid){\n        cat(\"Please provide a comma seperated list of indices.\")\n      }else{\n        cat(\"\")\n      } \n    })\n  })\n\n  output$message1 = renderPrint({\n    input$select_numeric1\n    input$select_operation1\n    input$numeric_input1\n    isolate({\n      if(!is.convertable.numeric(input$numeric_input1)){\n        cat(\"Please provide a numeric variable.\")\n      }else{\n        cat(input$select_numeric1,input$select_operation1,input$numeric_input1)\n      } \n    })\n  })\n\n  output$filter.data.summary <- renderPrint({\n    input$selector\n    input$filter_data_perform\n    isolate({\n      data.summary()\n    })\n  })\n  \n  output$filter.dataset =renderUI({\n    input$selector\n    row.operations.panel()\n  })\n\n  ##  Row operations (Perform row operations) --> Sort data by variables\n  \n  observe({\n    input$sort_vars\n    isolate({\n      if(!is.null(input$sort_vars)&&input$sort_vars>0){\n        indexes1= grep(\"^sort[0-9]+$\",names(input))\n        vars = unlist(lapply(indexes1,function(i,nams){\n          input[[nams[i]]]\n        },names(input)))\n        indexes2 = grep(\"^increasing[0-9]+$\",names(input))\n        sort.type = unlist(lapply(indexes2,function(i,nams){\n          input[[nams[i]]]\n        },names(input)))\n        if(anyDuplicated(vars)){\n          dups = which(duplicated(vars))\n          vars = vars[-dups]\n          sort.type =sort.type[-dups]\n        }\n        if(\"\"%in%vars){\n          empties = which(vars%in%\"\")\n          vars = vars[-empties]\n          sort.type =sort.type[-empties]\n        }\n        print(vars)\n        print(sort.type)\n        data <<- sort.data(vars,sort.type,data)\n      }\n    })\n  })\n\n  output$sort.table = renderDataTable({\n    input$selector\n    input$sort_vars\n    data\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$sort.variables = renderUI({\n    input$selector\n    isolate({\n      sort.variables()\n    })\n  })\n  \n  output$num.select.panel = renderUI({\n    input$num_columns_sort\n    isolate({\n      num.select.panel(input$num_columns_sort)\n    })\n  })\n\n  ##  Row operations (Perform row operations) --> Aggregate data\n\n  observe({\n    input$aggregate_vars\n    isolate({\n      if(!is.null(input$aggregate_vars)&&input$aggregate_vars>0){\n        vars = input$aggros\n        rem = which(vars%in%\"\")\n        if(length(rem)>0){\n          vars = vars[-rem]\n        }\n        methods = input$aggregate.method\n        rem  = which(methods%in%\"\")\n        if(length(rem)>0){\n          methods = methods[-rem]\n        }\n        if(length(vars)>0&length(methods)>0&!is.null(data)){\n          data <<- aggregate.data(aggregate.over=unique(vars),methods=methods,dafr=data)\n        }\n      }\n    })\n  })\n\n  output$aggregate.variable = renderUI({\n    input$selector\n    isolate({\n      aggregate.variable()\n    })\n  })\n\n  output$aggregate.table = renderDataTable({\n    input$aggregate_vars\n    input$selector\n    data\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, \n                 columns.defaultContent=\"NA\",scrollX=T))\n\n  ##  Row operations (Perform row operations) --> Stack variables\n  \n  observe({\n    input$stack_vars\n    isolate({\n      if(!is.null(input$stack_vars)&&input$stack_vars>0){\n        data <<- stack.variables.perform(input$stack_vars_column,data)\n      }\n    })\n  })\n\n  observe({\n    input$stack_vars_which\n    isolate({\n      if(!is.null(input$stack_vars_which)&&!\"\"%in%input$stack_vars_which){\n        if(\"categorical\"%in%input$stack_vars_which){\n          updateSelectInput(session,inputId=\"stack_vars_column\",\n                            choices=get.categorical.column.names(),\n                            selected=1)\n        }else{\n          updateSelectInput(session,inputId=\"stack_vars_column\",\n                            choices=get.numeric.column.names(),\n                            selected=1)\n        }\n      }\n    })\n  })\n\n  output$stack.table = renderDataTable({\n    input$stack_vars\n    data\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$stack.variables = renderUI({\n    input$selector\n    stack.variables()\n  })\n\n  ##  Row operations (Perform row operations) --> Restore data\n\n  observe({\n    input$restore_data_button\n    isolate({\n      if(!is.null(input$restore_data_button)&&input$restore_data_button>0){\n        data <<- data.restore\n      }\n    })\n  })\n  \n  output$data.restore.table = renderDataTable({\n    input$restore_data_button\n    data\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$restore.data = renderUI({\n    input$selector\n    restore.data()\n  })\n\n    ##  modify -> Reorder levels : reorder the levels of a column of factors\n    selection.changed = observe({\n        if(!is.null(input$select.column)){\n            choices=\"\"\n            if(!\"\" %in% input$select.column){\n                if(is.factor(data[,input$select.column])){\n                    choices = levels(data[,input$select.column])\n                }else{\n                    choices = levels(as.factor(data[,input$select.column]))\n                }\n            }\n            updateSelectInput(session=session,inputId=\"select.item\",selected=\"\",choices=choices)\n        }\n    })\n\n    button.pressed = observe({\n        input$reorder\n        updateSelectInput(session=session,inputId=\"select.item\",selected=\"\",choices=\"\")\n        updateSelectInput(session=session,inputId=\"select.column\",selected=\"\")\n        isolate({\n            items = input$select.item\n            if(!is.null(items)&!is.null(input$select.column)){\n                column = data[,input$select.column]\n                if(length(items)<length(column)){\n                    not.in = sort(unique(data[,input$select.column])[which(!unique(data[,input$select.column])%in%items)])\n                    levels.new = c(items,not.in)\n                }else{\n                    levels.new = c(items)\n                }\n                data[,input$select.column] <<- as.factor(data[,input$select.column])\n                levels(data[,input$select.column]) <<- levels.new\n            }\n        })\n    })\n\n    output$maintext.reorder = renderPrint({\n        text = \"\"\n        if(!is.null(input$select.column)&&!\"\"%in%input$select.column){\n            print(table(data[,input$select.column]))\n        }else{\n            print(\"Select a column!\")\n        }\n    })\n\n    output$reorder.levels =renderUI({\n        input$selector\n        reorder.levels.panel()\n    })\n\n    ## modify -> compare dates : reorder the levels of a column of factors\n\n#     observe({\n#         input$compare_dates\n#         if(!is.null(data)&&!is.null(input$compare_dates)&&input$compare_dates>0){\n#             isolate({\n#                 columns = input$sel.compare.dates[1:2]\n#                 if(!is.null(columns)&&columns[1]!=\"\"){\n#                     temp.col = NULL\n#                     for(col in 1:length(columns)){\n#                         if(col==1){\n#                             tryCatch({\n#                                 temp.col = as.numeric(as.Date(data[,columns[col]], origin = \"1900-01-01\"))\n#                             },\n#                                      error=function(cond) {\n#                                          temp.col = NULL\n#                                      },\n#                                      warning=function(cond) {\n#                                          print(cond)\n#                                      },\n#                                      finally={})\n#                         }else{\n#                             tryCatch({\n#                                 temp.col = temp.col - as.numeric(as.Date(data[,columns[col]], origin = \"1900-01-01\"))\n#                             },\n#                                      error=function(cond) {\n#                                          temp.col = NULL\n#                                      },\n#                                      warning=function(cond) {\n#                                          print(cond)\n#                                      },\n#                                      finally={})\n#                         }\n#                     }\n#                     if(!is.null(temp.col)){\n#                         count=1\n#                         while(paste0(\"date\",count)%in%colnames(data)){\n#                             count = count+1\n#                         }\n#                         data <<- cbind(data,date.column.temp=round(temp.col,2))\n#                         colnames(data)[which(colnames(data)%in%\"date.column.temp\")] <<- paste0(\"date\",count)\n#                         updateSelectInput(session=session,inputId=\"sel.compare.dates\",selected=\"\",choices=colnames(data))\n#                     }\n#                 }\n#             })\n#         }\n#     })\n# \n#     output$comp.dates.table = renderDataTable({\n#         columns = input$sel.compare.dates[1:2]\n#         ret = NULL\n#         if(!is.null(data)){\n#             ret = data[,test.for.dates()]\n#             if(ncol(ret)==0){\n#                 ret = NULL\n#             }\n#             if(!is.null(columns)&&columns[1]!=\"\"){\n#                 temp.col = NULL\n#                 for(col in 1:length(columns)){\n#                     if(col==1){\n#                         tryCatch({\n#                             temp.col = as.numeric(as.Date(data[,columns[col]], origin = \"1900-01-01\"))\n#                         },\n#                                  error=function(cond) {\n#                                      temp.col = NULL\n#                                  },\n#                                  warning=function(cond) {\n#                                      print(cond)\n#                                  },\n#                                  finally={})\n#                     }else{\n#                         tryCatch({\n#                             temp.col = temp.col - as.numeric(as.Date(data[,columns[col]], origin = \"1900-01-01\"))\n#                         },\n#                                  error=function(cond) {\n#                                      temp.col = NULL\n#                                  },\n#                                  warning=function(cond) {\n#                                      print(cond)\n#                                  },\n#                                  finally={})\n#                     }\n#                 }\n#                 if(!is.null(temp.col)){\n#                     ret = cbind(ret,temp.date=round(temp.col,2))\n#                 }\n#             }\n#         }\n#         ret\n#     },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n# \n#     output$compare.dates = renderUI({\n#         input$selector\n#         compare.dates.panel()\n#     })\n\n    ##  modify -> add columns : paste in data to add as additional column.\n    observe({\n        input$add_column\n        isolate({\n          temp=data\n          if(!is.null(data)&&!is.null(input$new.column)&&input$add_column>0){\n              colu = strsplit(input$new.column,\"\\n\",fixed=T)[[1]]\n              if(length(colu)==1){\n                  colu = strsplit(input$new.column,\",\",fixed=T)[[1]]\n              }\n              if(length(colu)<nrow(data)){\n                  colu = rep(colu,length.out=nrow(data))\n              }\n              if(length(colu)>nrow(data)){\n                  colu = colu[1:nrow(data)]\n              }\n              NAs = which(is.na(colu))\n              if(length(NAs)>0&&length(colu[-NAs])>0){\n                  temp.colu = as.numeric(colu[-NAs])\n                  if(!any(is.na(temp.colu))){\n                      colu = as.numeric(colu)\n                  }\n              }\n              count = 1\n              name = \"add.column1\"\n              while(name%in%colnames(data)){\n                  count =  count +1\n                  name = paste0(\"add.column\",count)\n              }\n              temp = cbind(data,temp.column=colu)\n              colnames(temp)[which(colnames(temp)%in%\"temp.column\")] = name\n              temp\n          }\n          data <<- temp\n          updateTextInput(session, inputId=\"new.column\", value=\"\")\n        })\n    })\n\n    output$add.table = renderDataTable({\n        input$selector\n        input$new.column\n        input$add_column\n        isolate({\n          temp=data\n          if(!is.null(data)&&!is.null(input$new.column)){\n              colu = strsplit(input$new.column,\"\\n\",fixed=T)[[1]]\n              if(length(colu)==1){\n                  colu = strsplit(input$new.column,\",\",fixed=T)[[1]]\n              }\n              if(length(colu)<nrow(data)){\n                  colu = rep(colu,length.out=nrow(data))\n              }\n              if(length(colu)>nrow(data)){\n                  colu = colu[1:nrow(data)]\n              }\n              NAs = which(is.na(colu))\n              if(length(NAs)>0&&length(colu[-NAs])>0){\n                  temp.colu = as.numeric(colu[-NAs])\n                  if(!any(is.na(temp.colu))){\n                      colu = as.numeric(colu)\n                  }\n              }\n              count = 1\n              name = \"add.column1\"\n              while(name%in%colnames(data)){\n                  count =  count +1\n                  name = paste0(\"add.column\",count)\n              }\n              temp = cbind(data,temp.column=colu)\n              colnames(temp)[which(colnames(temp)%in%\"temp.column\")] = name\n              temp\n          }\n          temp\n        })\n    },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n    output$add.columns = renderUI({\n        add.columns.panel()\n    })\n\n    ##  modify -> remove columns : remove selected columns from the data.\n\n    observe({\n        input$rem_column\n        if(!is.null(data)&&!is.null(input$rem_column)&&input$rem_column>0){\n            isolate({\n                if(length(which(colnames(data)%in%input$select.remove.column))>0){\n                    data <<- as.data.frame(data[,-which(colnames(data)%in%input$select.remove.column)])\n                    if(ncol(data)==0){\n                        data <<- NULL\n                        updateSelectInput(session, inputId=\"select.remove.column\",choices=c(\"\"),selected=\"\")\n                    }else{\n                        updateSelectInput(session, inputId=\"select.remove.column\", choices=colnames(data),selected=\"\")\n                    }\n                }\n            })\n        }\n    })\n\n    output$rem.col.table = renderDataTable({\n        input$selector\n        input$rem_column\n        isolate({\n          temp = data\n          if(!is.null(data)&&!is.null(input$select.remove.column)){\n              temp = as.data.frame(data[,-which(colnames(data)%in%input$select.remove.column)])\n              if(ncol(temp)==0){\n                  temp=NULL\n              }\n          }\n          temp\n        })\n    },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n    output$remove.columns = renderUI({\n        input$selector\n        remove.columns.panel()\n    })\n\n  ## Quick Explore -> Data summary : display a quick summary of the data\n  output$all.summary = renderPrint({\n    input$selector\n    data.summary()\n  })\n\n  output$column.summary = renderPrint({\n    if(!is.null(input$select.column.sum)){\n      temp = data[,which(colnames(data)%in%input$select.column.sum)]\n      if(is.character(temp)){\n        print(as.factor(temp))\n        cat(\"\\n\\t\")\n        print(summary(as.factor(temp)))\n      }else{\n        print(summary(temp))\n      }\n    }else{\n      NULL\n    }\n  })\n\n    output$quick.summary = renderUI({\n        input$selector\n        quick.summary.panel()\n    })\n\n    ##  Quick Explore -> Single column plot : Generate a plot of a single column in the data\n    \n    observe({\n      input$single.backward\n      isolate({\n        if(!is.null(input$single.backward)&&input$single.backward>0){\n          index=1\n          if(which(colnames(data)%in%input$select.column.plot)==1){\n            index=ncol(data)\n          }else{\n            index = which(colnames(data)%in%input$select.column.plot)-1\n          }\n          updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(data),selected=colnames(data)[index])\n          updateSliderInput(session,inputId=\"single.play\",value=index)\n        }\n      })\n    })\n\n    observe({\n      input$single.forward\n      isolate({\n        if(!is.null(input$single.forward)&&input$single.forward>0){\n          index=1\n          if(which(colnames(data)%in%input$select.column.plot)==ncol(data)){\n            index=1\n          }else{\n            index = which(colnames(data)%in%input$select.column.plot)+1\n          }\n          updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(data),selected=colnames(data)[index])\n          updateSliderInput(session,inputId=\"single.play\",value=index)\n        }\n      })\n    })\n\n    observe({\n      input$single.play\n      isolate({\n        if(!is.null(input$single.play)){\n          updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(data),selected=colnames(data)[input$single.play])\n        }\n      })\n    })\n\n    output$column.plot = renderPlot({\n      input$select.column.plot\n      isolate({\n        if(!is.null(data)&&!is.null(input$select.column.plot)){\n          index=which(colnames(data)%in%input$select.column.plot)\n          if(length(index)==0){\n            index = 1\n          }\n          updateSliderInput(session,inputId=\"single.play\",value=index)\n          temp = data[,index]\n          if(is.character(temp)){\n              temp = as.factor(temp)\n          }\n          iNZightPlot(temp,xlab=input$select.column.plot,main=data.name)\n        }\n      })\n    })\n\n    output$single.column.plot = renderUI({\n        input$selector\n        single.column.plot.panel()\n    })\n    ##  Quick Explore -> Column pair plot : Generate a plot of all possible pairs of columns\n    \n    observe({\n      input$pair.player\n      isolate({\n        if(!is.null(input$pair.player)){\n          indMat = rbind(1:(ncol(data)*(ncol(data)-1)),\n                         rep(1:(ncol(data)-1),ncol(data)),\n                         ceiling(seq(from=0.1,to=ncol(data),by=1/(ncol(data)-1))))\n          index1 = indMat[3,input$pair.player]\n          index2 = indMat[2,input$pair.player]\n          button<<-T\n          updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(data)[index1],choices=colnames(data))\n          updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(data)[-index1][index2],\n                            choices=colnames(data)[-index1])\n        }\n      })\n    })\n\n    observe({\n      input$pair.backward\n      isolate({\n        if(!is.null(input$pair.backward)&&input$pair.backward>0){\n          index1 = which(colnames(data)%in%input$select.column.plot1)\n          index2 = which(colnames(data)[-index1]%in%input$select.column.plot2)\n          if(index2==1){\n            if(index1==1){\n              index1 = ncol(data)\n            }else{\n              index1 = index1-1\n            }\n            button<<-T\n            updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(data)[index1],choices=colnames(data))\n            index2 = ncol(data)-1\n          }else{\n            index2 = index2-1\n          }\n          updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(data)[-index1][index2],\n                            choices=colnames(data)[-index1])\n          matInd = which(colnames(data)%in%colnames(data)[-index1][index2])\n          updateSliderInput(session,inputId=\"pair.player\",\n                            value=matrix(c(unlist(lapply(seq(from=ncol(data),by=ncol(data),\n                                                             to=ncol(data)*(ncol(data)-1)),function(x,n){\n                                                               c(0,(x-(n-1)):x)\n                                                             },\n                                                         ncol(data))),0),nrow=ncol(data))[matInd,index1]\n                            )\n        }\n      })\n    })\n\n    observe({\n      input$pair.forward\n      isolate({\n        if(!is.null(input$pair.forward)&&input$pair.forward>0){\n          index1 = which(colnames(data)%in%input$select.column.plot1)\n          index2 = which(colnames(data)[-index1]%in%input$select.column.plot2)\n          if(index2==(ncol(data)-1)){\n            if(index1==ncol(data)){\n              index1 = 1\n            }else{\n              index1 = index1+1\n            }\n            button<<-T\n            updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(data)[index1],choices=colnames(data))\n            index2 = 1\n          }else{\n            index2 = index2+1\n          }\n          updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(data)[-index1][index2],\n                            choices=colnames(data)[-index1])\n          matInd = which(colnames(data)%in%colnames(data)[-index1][index2])\n          updateSliderInput(session,inputId=\"pair.player\",\n                            value=matrix(c(unlist(lapply(seq(from=ncol(data),by=ncol(data),\n                                                             to=ncol(data)*(ncol(data)-1)),function(x,n){\n                                                               c(0,(x-(n-1)):x)\n                                                             },\n                                                         ncol(data))),0),nrow=ncol(data))[matInd,index1]\n          )\n        }\n      })\n    })\n\n    observe({\n        input$select.column.plot1\n        isolate({\n          choice = input$select.column.plot1\n          if(!is.null(choice)){\n            i = input$select.column.plot2\n            if(input$select.column.plot1==input$select.column.plot2){\n              i = which(colnames(data)%in%input$select.column.plot1)\n              if(i>(ncol(data)-1)){\n                i=1\n              }\n            }\n            ch = colnames(data)[-which(colnames(data)%in%choice)]\n            if(!button){\n              updateSelectInput(session,\"select.column.plot2\",choices=ch,\n                                selected=ch[i])  \n            }\n            button<<-F\n          }\n        })\n    })\n\n  output$plot.column.pair = renderPlot({\n    if(!is.null(input$select.column.plot1)&&!is.null(input$select.column.plot2)&&\n         !\"\"%in%input$select.column.plot1&&!\"\"%in%input$select.column.plot2){\n      index1 = which(colnames(data)%in%input$select.column.plot1)\n      index2 = which(colnames(data)%in%input$select.column.plot2)\n      if(length(index1)==0){\n        index1 = 1\n      }\n      if(length(index2)==0){\n        if(index1+1>ncol(data)){\n          index2 = 1\n        }else{\n          index2 = index1 + 1\n        }\n      }\n      x = data[,index1]\n      y = data[,index2]\n      iNZightPlot(x,y,xlab=input$select.column.plot1,ylab=input$select.column.plot2,main=data.name)\n    }\n  })\n\n    output$column.pair.plot = renderUI({\n        input$selector\n        column.pair.plot.panel()\n    })\n\n    ##  Quick Explore -> Compare pairs : Generate plots of all possible pairs of columns\n    output$plot.matrix = renderPlot({\n        choices = input$select.matrix.plot\n        if(is.null(choices)||length(choices)==1){\n            plot(1, 1, type = \"n\", axes = FALSE, xlab = \"\" , ylab = \"\")\n            text(1, 1, \"You have to select more than 1 variable\", cex = 2)\n        }else{\n            choices.ind = which(colnames(data) %in% choices)\n            temp =\n                do.call(cbind,\n                        lapply(data[, choices.ind],\n                               function(x) {\n                                   if (is.character(x)) {\n                                       data.frame(factor(x, levels = unique(x)))\n                                   } else {\n                                       data.frame(x)\n                                   }\n                               }))\n            colnames(temp) = choices\n            gpairs(temp)\n        }\n    })\n\n    output$matrix.plot = renderUI({\n        input$selector\n        matrix.plot.panel()\n    })\n\n    ##--------------------##\n    ##  Visualize Module  ##\n    ##--------------------##\n    source(\"panels/5_Visualize/1_visualize-panel-ui.R\", local = TRUE)\n    source(\"panels/5_Visualize/2_visualize-panel-server.R\", local = TRUE)\n    output$visualize.panel <- renderUI({\n        input$selector\n        visualize.panel.ui()\n    })\n\n    ##----------------------##\n    ##  Time Series Module  ##\n    ##----------------------##\n    source(\"panels/6_TimeSeries/1_timeseries-panel-ui.R\", local = TRUE)\n    source(\"panels/6_TimeSeries/2_timeseries-panel-server.R\", local = TRUE)\n    output$timeseries.panel <- renderUI({\n        input$selector\n        timeseries.panel.ui()\n    })\n\n    ##---------------##\n    ##  Help Module  ##\n    ##---------------##\n    source(\"panels/7_Help/1_help-panel-ui.R\", local = TRUE)\n    output$help.panel <- renderUI({\n        input$selector\n        help.panel.ui()\n    })\n})\n",
    "created" : 1427144807107.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1296389282",
    "id" : "1952A33E",
    "lastKnownWriteTime" : 1427254535,
    "path" : "~/git/Lite/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}