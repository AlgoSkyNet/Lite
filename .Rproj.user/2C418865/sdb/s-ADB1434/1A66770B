{
    "contents" : "###-------------------------------------###\n### Server Functions for iNZight Lite   ###\n###-------------------------------------###\n###\n### Date Created : January 10, 2015\n### Last Modified : March 23, 2015\n###\n### Please consult the comments before editing any code.\n### This file sources the ui files for each panel separately.\n\n###  We load the packages we require. This is done only ONCE per instance.\nlibrary(iNZightPlots)\nlibrary(iNZightTS)\nlibrary(markdown)\nlibrary(gpairs)\n\n<<<<<<< HEAD\nsource(\"functions.R\")\n=======\n\n>>>>>>> refs/remotes/origin/development\n\n\n### We write the server function.\nshinyServer(function(input, output, session) {\n  \n  source(\"functions.R\",local=T)\n  \n  ##Specify all the reactive values\n  \n  values = reactiveValues()\n  values$data.name = NULL\n  values$data.dir = \"data\"\n  values$data.set = NULL\n  values$data.restore = NULL\n  values$lite.version = \"iNZight Lite Version 0.9.7.2\"\n  values$lite.update = \"Last Updated: 23/03/15\"\n  values$button = F\n  values$transform.text = \"\"\n  values$dataHasChanged = F\n  \n  get.data.name = reactive({\n    values$data.name\n  })\n  \n  get.data.dir = reactive({\n    values$data.dir\n  })\n\n  get.data.set = reactive({\n    values$data.set\n  })\n  \n  get.data.restore = reactive({\n    values$data.restore\n  })\n  \n  get.lite.version = reactive({\n    values$lite.version\n  })\n  \n  get.lite.update = reactive({\n    values$lite.update\n  })\n  \n  get.button = reactive({\n    values$button\n  })\n  \n  get.transform.text = reactive({\n    values$transform.text\n  })\n  \n  get.dataHasChanged = reactive({\n    values$dataHasChanged\n  })\n  \n  #################################\n  \n    ##  Turn errors and warnings off\n    ## options(warn = -1, show.error.messages = FALSE)\n    \n    ##  Delete all imported files that are older than 1 day.\n    ## Load all panels into memory.\n    filepaths <- list.files(pattern = \"[.]R$\",\n                            path = \"gui-elements/\",\n                            full.names = TRUE)\n    sapply(filepaths, source)\n    ##---------------------##\n    ##  1. \"About\" Module  ##\n    ##---------------------##\n    source(\"panels/1_About/1_about-panel-ui.R\")\n    output$about.panel <- renderUI({\n        about.panel.ui(get.lite.version(),get.lite.update())\n    })\n    ## \"Current data\" - presents currently selected data to user.\n    output$current.text <- renderText({\n        input$selector\n        if (!is.null(get.data.set())) {\n            paste0(\"Current selected data: \", get.data.name())\n        } else {\n            \"No data selected!\"\n        }\n    })\n    output$current.data <- renderUI({\n        current.data()\n    })\n    output$current <- renderDataTable({\n        input$selector\n        get.data.set()\n    }, options =\n        list(lengthMenu = c(10, 30, 50), pageLength = 10,\n             columns.defaultContent = \"NA\", scrollX = TRUE))\n    ## \"Switch data\" - 'switches' to a different data set.\n    set_to_change_reac <- reactive({\n      if (is.null(input[[input$data_select]])){\n        \"No data to select!\"\n      } else {\n        temp = load.data(get.data.dir(),strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]]\n                         [length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])[[2]]\n        if(is.null(temp[[1]])&is.null(temp[[2]])) {\n          \"No data to select!\"\n        }else{\n          paste0(\"Data selected: \", input[[input$data_select]])  \n        }\n      }\n    })\n\n    output$set_to_change <- renderText({\n        input[[input$data_select]]\n        set_to_change_reac()\n    })\n\n    col_names_show_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(get.data.set()) && !is.null(get.data.name())) {\n            paste(\"Column names: \", paste(colnames(get.data.set()), collapse = \", \"))\n        } else {\n            \"\"\n        }\n    })\n\n    output$col_names_show <- renderText({\n        input$change_set\n        input$selector\n        col_names_show_reac()\n    })\n\n    change_col_dim_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(get.data.set()) && !is.null(get.data.name())) {\n            paste(\"Selected data number of columns is: \", dim(get.data.set())[2])\n        } else {\n            \"\"\n        }\n    })\n\n    output$col_dimension_show <- renderText({\n        input$change_set\n        input$selector\n        input$selector\n        change_col_dim_reac()\n    })\n\n    change_row_dim_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(get.data.set()) && !is.null(get.data.name())) {\n            paste(\"Selected data number of rows is: \", dim(get.data.set())[1])\n        } else {\n            \"\"\n        }\n    })\n\n    output$row_dimension_show <- renderText({\n        input$change_set\n        input$selector\n        change_row_dim_reac()\n    })\n\n    change_data_name_reac <- reactive({\n        input$change_set\n        input$selector\n        if (!is.null(get.data.set()) && !is.null(get.data.name())) {\n            paste(\"Selected data set: \", get.data.name())\n        } else {\n            \"No data selected!\"\n        }\n    })\n\n    output$data_name_show <- renderText({\n        input$change_set\n        input$selector\n        change_data_name_reac()\n    })\n\n    observe({\n      if (!is.null(input$change_set)) {\n        isolate({\n          if (!is.null(input[[input$data_select]])&&input$change_set > 0) {\n            new.data =\n                load.data(get.data.dir(),strsplit(input[[input$data_select]],\n                                   \"==>\", fixed = TRUE)[[1]]\n                          [length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])\n            values$data.name = new.data[[1]]\n            new.data = new.data[[2]]\n            values$data.set = new.data\n            values$data.restore = get.data.set()\n#            loaded <<- F\n          }\n        })\n      }\n    })\n\n    ## loads and updates the switch data table Panel\n    output$switch.data.panel = renderUI({\n      get.data.set()\n      input$remove_set\n      isolate({\n        switch.data.panel(get.data.set(),get.data.dir())\n      })\n    })\n\n    output$temp_table = renderDataTable({\n      if (!is.null(input[[input$data_select]])){\n        load.data(get.data.dir(),strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]][length(strsplit(input[[input$data_select]],\"==>\",fixed=T)[[1]])])[[2]]\n      } else {\n          NULL\n      }\n    }, options = list(lengthMenu = c(5, 30, 50), pageLength = 5,\n                      columns.defaultContent = \"NA\", scrollX = TRUE))\n\n    ##  Data -> load data (upload a data set)\n    \n    observe({\n      if(!is.null(input$import_set)&&input$import_set>0){\n        isolate({\n          if(!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])){\n            values$data.set <<- load.data(get.data.dir(),fileID = input$files[1, \"name\"], path = input$files[1, \"datapath\"])[[2]]\n            values$data.restore <<- get.data.set()\n            temp = strsplit(input$files[1, \"name\"],\".\",fixed=T)[[1]]\n            if(length(temp)>1){\n              temp = temp[1:(length(temp)-1)]\n            } \n            values$data.name = paste(temp,collapse=\".\")\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            saveRDS(get.data.set(),file = paste0(\"data/Imported/\", get.data.name(), \".RDS\"))\n#             print(input$files[1, \"datapath\"])\n#             unlink(input$files[1, \"datapath\"])\n          }else if (!is.null(input$URLtext)&&!input$URLtext%in%\"\"){\n            URL = input$URLtext\n            name = strsplit(URL,\"/\")[[1]]\n            name = strsplit(name[length(name)],\"?\",fixed=T)[[1]][1]\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            tryCatch({\n              download.file(url=URL,destfile=paste0(\"data/Imported/\",name),method=\"wget\")\n              temp = load.data(get.data.dir(),fileID = name, path = paste0(\"data/Imported/\",name))\n              values$data.set = temp[[2]]\n              values$data.restore <<- get.data.set()\n              values$data.name = name\n            },error = function(e){\n              if(file.exists(paste0(\"data/Imported/\",name))){\n                unlink(paste0(\"data/Imported/\",name))\n              }\n              print(e)\n            },warning = function(w) {\n              print(w)\n            },finally = {})\n          }\n        })\n      }\n    })\n    \n    output$load.data.panel = renderUI({\n        input$selector\n        isolate({\n          load.data.panel()\n        })\n    })\n\n    output$filetable <- renderDataTable({\n        input$selector\n        input$files\n        input$import_set\n        isolate({\n          if (!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])) {\n            load.data(get.data.dir(),fileID = input$files[1, \"name\"], path = input$files[1, \"datapath\"])[[2]]\n          } else if (!is.null(input$URLtext)&&!input$URLtext%in%\"\") {\n            URL = input$URLtext\n            name = strsplit(URL,\"/\")[[1]]\n            name = strsplit(name[length(name)],\"?\",fixed=T)[[1]][1]\n            if (!file.exists(\"data/Imported\")) {\n              dir.create(\"data/Imported\", recursive = TRUE)\n            }\n            if(file.exists(paste0(\"data/Imported/\",name))){\n              return(get.data.set())\n            }\n            NULL\n          }else{\n            NULL\n          }\n        })\n    }, options =\n        list(lengthMenu = c(5, 30, 50), pageLength = 5,\n             columns.defaultContent=\"NA\", scrollX = TRUE))\n\n    observe({\n      input$remove_set\n      isolate({\n        if(!is.null(input$remove_set)&&input$remove_set>0){\n          files = list.files(path = \"data/Imported\",\n                             pattern = input$Importedremove,\n                             full.names = TRUE)\n          if(!is.null(input$files)&&file.exists(input$files[1, \"datapath\"])&&\n               grepl(get.data.name(),input$files[1, \"name\"])){\n            unlink(input$files[1, \"datapath\"])\n          }\n          for(f in files){\n            if (file.exists(f)) {\n                unlink(f)\n            }\n          }\n        }\n      })\n    })\n\n    ##  Data -> Export data (export the currently used data set)\n\n    output$save.data.panel = renderUI({\n      save.data.panel(get.data.set())\n    })\n\n    output$save_table = renderDataTable({\n      get.data.set()\n    }, options =\n      list(lengthMenu = c(5, 30, 50), pageLength = 5,\n           columns.defaultContent = \"NA\", scrollX = TRUE))\n\n    output$downloadData <- downloadHandler(\n      filename = function() {\n        print(paste(get.data.name(),\".\",input$select_filetype, sep=''))\n        paste(get.data.name(),\".\",input$select_filetype, sep='')\n      },\n      content = function(file) {\n        type = input$select_filetype\n        if(type%in%\"txt\"&&!is.null(get.data.set())){\n          write.table(get.data.set(), file, quote=F,row.names=F,sep=\"\\t\")\n        }else if(type%in%\"csv\"&&!is.null(get.data.set())){\n          write.table(get.data.set(), file, quote=F,row.names=F,sep=\",\")\n        }else if(type%in%\"RData\"&&!is.null(get.data.set())){\n          save(get.data.set(),file=file)\n        }else if(type%in%\"RDS\"&&!is.null(get.data.set())){\n          saveRDS(get.data.set(),file=file)\n        }\n      }\n    )\n    \n    ##  Data -> remove data (Remove an imported data set)\n    output$remove.data.panel <- renderUI({\n      input$selector\n      input$remove_set\n      isolate({\n        remove.data.panel()\n      })\n    })\n\n    output$removetable <- renderDataTable({\n      if(!is.null(input$Importedremove)){\n        load.data(get.data.dir(),input$Importedremove)[[2]]\n      } else {\n          NULL\n      }\n    }, options =\n        list(lengthMenu = c(5, 30, 50), pageLength = 5,\n             columns.defaultContent = \"NA\", scrollX = TRUE))\n\n  ##  Modify data -> transform columns (Perform column transformations)\n  \n  transform.temp.table = reactive({\n    input$select.columns.transform\n    input$select.transform\n    isolate({\n      transform.tempTable(get.data.set(),input$select.transform,input$select.columns.transform)\n    })\n  })\n  \n  perform.transform = reactive({\n  #       input$select.columns.transform\n  #       input$select.transform\n    isolate({\n      transform.perform(get.data.set(),\n                        input$select.transform,\n                        input$select.columns.transform)\n    })\n  })\n  \n  observe({\n    input$transform\n    isolate({\n      if(!is.null(input$transform)&&input$transform>0){\n        values$data.set = perform.transform()\n        updateSelectInput(session, inputId=\"select.columns.transform\", \n                          choices=colnames(get.data.set()), selected=input$select.columns.transform)\n        values$dataHasChanged = T\n      }\n    })\n  })\n  \n  output$table_part <- renderDataTable({\n    transform.temp.table()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n  \n  output$status = renderText({\n      input$transform\n      input$select.columns.transform\n      input$select.transform\n      isolate({\n        values$transform.text = \"\"\n        if(get.dataHasChanged()){\n          values$transform.text = \"The transformation  of the columns was successful.\"\n        }\n        values$dataHasChanged = F\n        get.transform.text()\n      })\n  })\n  \n  output$transform.columns =renderUI({\n      transform.data.panel(get.data.set())\n  })\n\n  ##  Row operations (Perform row operations) --> Filter Dataset\n  \n  observe({\n    input$filter_data_perform\n    isolate({\n      if(!is.null(input$filter_data_perform)&&input$filter_data_perform>0){\n        if(input$select_filter%in%\"levels of categorical variable\"){\n          if(!is.null(input$select_categorical1)&&!input$select_categorical1%in%\"\"){\n            to.remove = which(get.data.set()[,which(colnames(get.data.set())%in%input$select_categorical1)]%in%input$levels1)\n            if(length(to.remove)>0){\n              values$data.set = get.data.set()[-to.remove,]\n              values$data.set[,which(colnames(get.data.set())%in%input$select_categorical1)] = \n                droplevels(get.data.set()[,which(colnames(get.data.set())%in%input$select_categorical1)])\n              updateSelectInput(session=session,inputId=\"select_categorical1\",\n                                choices=c(\"\",get.categorical.column.names(get.data.set())),\n                                selected=1)\n              updateSelectInput(session=session,inputId=\"levels1\",\n                                choices=\"\",selected=1)\n            }\n          }\n        }else if(input$select_filter%in%\"numeric condition\"){\n          if(!input$select_numeric1%in%\"\"&!input$select_operation1%in%\"\"&is.convertable.numeric(input$numeric_input1)){\n            indexes.keep = 1:nrow(get.data.set())\n            if(input$select_operation1%in%\"<\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]<as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\">\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]>as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"<=\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]<=as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\">=\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]>=as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"==\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]==as.numeric(input$numeric_input1)))\n            }else if(input$select_operation1%in%\"!=\"){\n              indexes.keep = which((get.data.set()[,which(colnames(get.data.set())%in%input$select_numeric1)]!=as.numeric(input$numeric_input1)))\n            }\n            values$data.set <<- get.data.set()[indexes.keep,]\n          }\n        }else if(input$select_filter%in%\"row indices\"){\n          if(is.convertable.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])){\n            indices = as.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])\n            indices = indices[which(indices%in%(1:nrow(get.data.set())))]\n            if(length(indices)>0){\n              values$data.set = get.data.set()[-indices,] \n            }\n          }\n        }else if(input$select_filter%in%\"randomly\"){\n          if(is.convertable.numeric(input$numeric_input2)&&\n               is.convertable.numeric(input$numeric_input3)&&\n               as.numeric(input$numeric_input2)<=nrow(get.data.set())&&\n               (((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(get.data.set())&\n                   input$bootstrap_check)|\n                  (as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(get.data.set()))){\n            values$data.set = sample.data(df=get.data.set(),\n                                 sampleSize=as.numeric(input$numeric_input2),\n                                 numSample=as.numeric(input$numeric_input3),\n                                 bootstrap=input$bootstrap_check)\n          }\n        }\n      }\n    })\n  })\n\n  output$message3 = renderPrint({\n    input$numeric_input2\n    input$numeric_input3\n    input$bootstrap_check\n    isolate({\n      if(is.convertable.numeric(input$numeric_input2)&&\n           is.convertable.numeric(input$numeric_input3)&&\n           as.numeric(input$numeric_input2)<=nrow(get.data.set())&&\n           (((as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))>=nrow(get.data.set())&\n               input$bootstrap_check)|\n              (as.numeric(input$numeric_input2)*as.numeric(input$numeric_input3))<=nrow(get.data.set()))){\n        cat(\"Size of sample: \",input$numeric_input2,\"\\n\",\n            \"Number of sample: \", input$numeric_input3)\n      }else{\n        cat(\"This input can not be processed. The data has \",\n            nrow(get.data.set()),\" rows.\")\n      }\n    })\n  })\n\n  observe({\n    input$select_categorical1\n    isolate({\n      if(!is.null(input$select_categorical1)){\n        updateSelectInput(session=session,inputId=\"levels1\",\n                             choices=levels(get.data.set()[,which(colnames(get.data.set())%in%input$select_categorical1)]))\n      }\n    })\n  })\n\n  output$message2 = renderPrint({\n    valid = is.convertable.numeric(strsplit(input$row_op_indexes,\",\",fixed=T)[[1]])\n    isolate({\n      if(!valid){\n        cat(\"Please provide a comma seperated list of indices.\")\n      }else{\n        cat(\"\")\n      } \n    })\n  })\n\n  output$message1 = renderPrint({\n    input$select_numeric1\n    input$select_operation1\n    input$numeric_input1\n    isolate({\n      if(!is.convertable.numeric(input$numeric_input1)){\n        cat(\"Please provide a numeric variable.\")\n      }else{\n        cat(input$select_numeric1,input$select_operation1,input$numeric_input1)\n      } \n    })\n  })\n\n  output$filter.data.summary <- renderPrint({\n    get.data.set()\n    input$filter_data_perform\n    isolate({\n      data.summary(get.data.set())\n    })\n  })\n  \n  output$filter.dataset = renderUI({\n    filter.data.panel(get.data.set())\n  })\n\n  ##  Row operations (Perform row operations) --> Sort data by variables\n  \n  observe({\n    input$sort_vars\n    isolate({\n      if(!is.null(input$sort_vars)&&input$sort_vars>0){\n        indexes1= grep(\"^sort[0-9]+$\",names(input))\n        vars = unlist(lapply(indexes1,function(i,nams){\n          input[[nams[i]]]\n        },names(input)))\n        indexes2 = grep(\"^increasing[0-9]+$\",names(input))\n        sort.type = unlist(lapply(indexes2,function(i,nams){\n          input[[nams[i]]]\n        },names(input)))\n        if(anyDuplicated(vars)){\n          dups = which(duplicated(vars))\n          vars = vars[-dups]\n          sort.type =sort.type[-dups]\n        }\n        if(\"\"%in%vars){\n          empties = which(vars%in%\"\")\n          vars = vars[-empties]\n          sort.type =sort.type[-empties]\n        }\n        values$data.set <<- sort.data(vars,sort.type,get.data.set())\n      }\n    })\n  })\n\n  output$sort.table = renderDataTable({\n    input$sort_vars\n    get.data.set()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$sort.variables = renderUI({\n    get.data.set()\n    isolate({\n      sort.variables(get.data.set())\n    })\n  })\n  \n  output$num.select = renderUI({\n    input$num_columns_sort\n    isolate({\n      num.select.panel(input$num_columns_sort,get.data.set())\n    })\n  })\n\n  ##  Row operations (Perform row operations) --> Aggregate data\n\n  observe({\n    input$aggregate_vars\n    isolate({\n      if(!is.null(input$aggregate_vars)&&input$aggregate_vars>0){\n        vars = input$aggros\n        rem = which(vars%in%\"\")\n        if(length(rem)>0){\n          vars = vars[-rem]\n        }\n        methods = input$aggregate.method\n        rem  = which(methods%in%\"\")\n        if(length(rem)>0){\n          methods = methods[-rem]\n        }\n        if(length(vars)>0&length(methods)>0&!is.null(get.data.set())){\n          values$data.set = aggregate.data(aggregate.over=unique(vars),methods=methods,dafr=get.data.set())\n          updateSelectInput(session,\"aggros\",selected=0,choices=get.categorical.column.names(get.data.set()))\n          updateSelectInput(session,\"aggregate.method\",selected=0)\n        }\n      }\n    })\n  })\n\n  output$aggregate.variable = renderUI({\n    aggregate.variable(get.data.set())\n  })\n\n  output$aggregate.table = renderDataTable({\n    get.data.set()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, \n                 columns.defaultContent=\"NA\",scrollX=T))\n\n  ##  Row operations (Perform row operations) --> Stack variables\n  \n  observe({\n    input$stack_vars\n    isolate({\n      if(!is.null(input$stack_vars)&&input$stack_vars>0&&\n           !is.null(input$stack_vars_column)){\n        values$data.set = stack.variables.perform(input$stack_vars_column,get.data.set())\n        updateSelectInput(session,\"stack_vars_which\",selected=0)\n        updateSelectInput(session,inputId=\"stack_vars_column\",\n                          choices=get.categorical.column.names(get.data.set()),\n                          selected=0)\n      }\n    })\n  })\n\n  observe({\n    input$stack_vars_which\n    isolate({\n      if(!is.null(input$stack_vars_which)&&!\"\"%in%input$stack_vars_which){\n        if(\"categorical\"%in%input$stack_vars_which){\n          updateSelectInput(session,inputId=\"stack_vars_column\",\n                            choices=get.categorical.column.names(get.data.set()),\n                            selected=1)\n        }else{\n          updateSelectInput(session,inputId=\"stack_vars_column\",\n                            choices=get.numeric.column.names(get.data.set()),\n                            selected=1)\n        }\n      }\n    })\n  })\n\n  output$stack.table = renderDataTable({\n    get.data.set()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$stack.variables = renderUI({\n    stack.variables.panel(get.data.set())\n  })\n\n  ##  Row operations (Perform row operations) --> Restore data\n\n  observe({\n    input$restore_data_button\n    isolate({\n      if(!is.null(input$restore_data_button)&&input$restore_data_button>0){\n        values$data.set = get.data.restore()\n      }\n    })\n  })\n  \n  output$data.restore.table = renderDataTable({\n    input$restore_data_button\n    get.data.set()\n  },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n  output$restore.data = renderUI({\n    restore.data.panel(get.data.set())\n  })\n\n  ## Manipulate variables --> Categorical variables\n\n  output$categorical.variables = renderUI({\n    get.data.set()\n    isolate({\n      if(input$selector%in%\"Categorical variables\"){\n        categorical.variables.panel(input$categorical_variables_select,get.data.set())\n      }\n    })\n  })\n\n  output$categorical.main.panel = renderUI({\n    input$categorical_variables_select\n    isolate({\n      if(!is.null(input$categorical_variables_select)&&\n           input$categorical_variables_select%in%\"Reorder levels\"){\n        reorder.main.panel()\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Collapse levels\"){\n        collapse.main.panel()\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Rename levels\"){\n        rename.levels.main.panel()\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Combine categorical\"){\n        combine.main.panel()\n      }\n    })\n  })\n\n  output$categorical.side.panel = renderUI({\n    input$categorical_variables_select\n    get.data.set()\n    isolate({\n      if(!is.null(input$categorical_variables_select)&&\n           input$categorical_variables_select%in%\"Reorder levels\"){\n        reorder.sidebar.panel(get.data.set())\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Collapse levels\"){\n        collapse.sidebar.panel(get.data.set())\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Rename levels\"){\n        rename.levels.sidebar.panel(get.data.set())\n      }else if(!is.null(input$categorical_variables_select)&&\n                 input$categorical_variables_select%in%\"Combine categorical\"){\n        combine.sidebar.panel(get.data.set())\n      }\n    })\n  })\n\n  ## Manipulate variables --> Categorical variables --> Reorder levels\n\n  observe({\n    input$reorder\n    isolate({\n      items = input$select.reorder.item\n      if(!is.null(items)&!is.null(input$select.reorder.column)){\n        column = get.data.set()[,input$select.reorder.column]\n        if(length(items)<length(unique(column))){\n          not.in = sort(unique(get.data.set()[,input$select.reorder.column])\n                        [which(!unique(get.data.set()[,input$select.reorder.column])%in%items)])\n          levels.new = c(items,as.character(not.in))\n        }else{\n          levels.new = items\n        }\n        values$data.set = reorder.levels(get.data.set(),input$select.reorder.column,levels.new)\n        updateSelectInput(session=session,inputId=\"select.reorder.item\",selected=\"\",choices=\"\")\n        updateSelectInput(session=session,inputId=\"select.reorder.column\",selected=\"\")\n      }\n    })\n  })\n\n  output$text_reorder = renderPrint({\n      if(!is.null(input$select.reorder.column)&&!\"\"%in%input$select.reorder.column){\n          print(table(get.data.set()[,input$select.reorder.column]))\n      }else{\n          print(\"Select a column!\")\n      }\n  })\n  \n  observe({\n      if(!is.null(input$select.reorder.column)){\n          choices=\"\"\n          if(!\"\" %in% input$select.reorder.column){\n              if(is.factor(get.data.set()[,input$select.reorder.column])){\n                  choices = levels(get.data.set()[,input$select.reorder.column])\n              }else{\n                  choices = levels(as.factor(get.data.set()[,input$select.reorder.column]))\n              }\n          }\n          updateSelectInput(session=session,inputId=\"select.reorder.item\",selected=\"\",choices=choices)\n      }\n  })\n\n\n\n  ## Manipulate variables --> Categorical variables --> Collapse levels\n\n  observe({\n    if(!is.null(input$select.collapse.column)){\n      choices=\"\"\n      if(!\"\" %in% input$select.collapse.column){\n        if(is.factor(get.data.set()[,input$select.collapse.column])){\n          choices = levels(get.data.set()[,input$select.collapse.column])\n        }else{\n          choices = levels(as.factor(get.data.set()[,input$select.collapse.column]))\n        }\n      }\n      updateSelectInput(session=session,inputId=\"select.collapse.item\",selected=\"\",choices=choices)\n    }\n  })\n\n  output$text_collapse_1st = renderPrint({\n    input$collapse\n    if(!is.null(input$select.collapse.column)&&!\"\"%in%input$select.collapse.column){\n      print(table(get.data.set()[,input$select.collapse.column]))\n    }else{\n      print(\"Select a column!\")\n    }\n  })\n\n  output$text_collapse_2nd = renderPrint({\n    input$collapse\n    if(!is.null(input$select.collapse.column)&&!\"\"%in%input$select.collapse.column&&\n         !is.null(input$select.collapse.item)&&!\"\"%in%input$select.collapse.item){\n      print(table(get.collapsed.column(get.data.set()[,input$select.collapse.column],input$select.collapse.item)))\n    }else{\n      print(\"\")\n    }\n  })\n\n  observe({\n    input$collapse\n    isolate({\n      if(!is.null(input$collapse)&&input$collapse>0&&input$select.collapse.column%in%colnames(get.data.set())){\n        if(any(input$select.collapse.item%in%get.data.set()[,which(colnames(get.data.set())%in%input$select.collapse.column)])){\n          values$data.set()[,which(colnames(get.data.set())%in%input$select.collapse.column)] = get.collapsed.column(\n            get.data.set()[,which(colnames(get.data.set())%in%input$select.collapse.column)],\n            input$select.collapse.item)\n          updateSelectInput(session,\"select.collapse.column\",selected=1)\n        }\n      }\n    })\n  })\n\n  output$rename.factors.inputs = renderUI({\n    input$select.rename.column\n    get.data.set()\n    isolate({\n      if(!is.null(input$select.rename.column)&&!input$select.rename.column%in%\"\"){\n        rename.factors.textfields(levels(get.data.set()[,input$select.rename.column]))\n      }\n    })\n  })\n\n  output$text_rename = renderPrint({\n    input$select.rename.column\n    get.data.set()\n    isolate({\n      if(!is.null(input$select.rename.column)&&!input$select.rename.column%in%\"\"){\n        print(summary(get.data.set()[,input$select.rename.column]))\n      }else{\n        print(\"\")\n      }\n    })\n  })\n\n  observe({\n    input$rename.levs\n    isolate({\n      if(!is.null(input$rename.levs)&&input$rename.levs>0){\n        indexes1= grep(\"^factor[0-9]+$\",names(input))\n        new.levels = c()\n        for(i in 1:length(indexes1)){\n          new.levels[i] = input[[names(input)[indexes1[i]]]]\n          if(is.null(new.levels[i])||new.levels[i]%in%\"\"){\n            new.levels[i] = levels(get.data.set()[,input$select.rename.column])[i]\n          }\n        }\n        values$data.set <<- rename.levels(get.data.set(),input$select.rename.column,new.levels)\n        updateSelectInput(session,\"select.rename.column\",selected=0)\n      }\n    })\n  })\n\n  ## Manipulate variables --> Categorical variables --> Combine levels\n\n  output$text_combine = renderPrint({\n    if(length(input$select.combine.columns)>0){\n      temp = combine.levels(get.data.set(),input$select.combine.columns)\n      print(table(temp[,ncol(temp)]))  \n    }else{\n      print(\"Please select a set of columns\")\n    }\n  })\n\n  observe({\n    input$combine\n    isolate({\n      if(!is.null(input$combine)&&input$combine>0){\n        values$data.set = combine.levels(get.data.set(),input$select.combine.columns)\n      }\n    })\n  })\n\n#     ##  modify -> Reorder levels : reorder the levels of a column of factors\n#     selection.changed = observe({\n#         if(!is.null(input$select.column)){\n#             choices=\"\"\n#             if(!\"\" %in% input$select.column){\n#                 if(is.factor(get.data.set()[,input$select.column])){\n#                     choices = levels(get.data.set()[,input$select.column])\n#                 }else{\n#                     choices = levels(as.factor(get.data.set()[,input$select.column]))\n#                 }\n#             }\n#             updateSelectInput(session=session,inputId=\"select.item\",selected=\"\",choices=choices)\n#         }\n#     })\n# \n# \n#     output$maintext.reorder = renderPrint({\n#         text = \"\"\n#         if(!is.null(input$select.column)&&!\"\"%in%input$select.column){\n#             print(table(get.data.set()[,input$select.column]))\n#         }else{\n#             print(\"Select a column!\")\n#         }\n#     })\n# \n#     output$reorder.levels =renderUI({\n#         input$selector\n#         reorder.levels.panel()\n#     })\n\n    ## modify -> compare dates : reorder the levels of a column of factors\n\n#     observe({\n#         input$compare_dates\n#         if(!is.null(get.data.set())&&!is.null(input$compare_dates)&&input$compare_dates>0){\n#             isolate({\n#                 columns = input$sel.compare.dates[1:2]\n#                 if(!is.null(columns)&&columns[1]!=\"\"){\n#                     temp.col = NULL\n#                     for(col in 1:length(columns)){\n#                         if(col==1){\n#                             tryCatch({\n#                                 temp.col = as.numeric(as.Date(get.data.set()[,columns[col]], origin = \"1900-01-01\"))\n#                             },\n#                                      error=function(cond) {\n#                                          temp.col = NULL\n#                                      },\n#                                      warning=function(cond) {\n#                                          print(cond)\n#                                      },\n#                                      finally={})\n#                         }else{\n#                             tryCatch({\n#                                 temp.col = temp.col - as.numeric(as.Date(get.data.set()[,columns[col]], origin = \"1900-01-01\"))\n#                             },\n#                                      error=function(cond) {\n#                                          temp.col = NULL\n#                                      },\n#                                      warning=function(cond) {\n#                                          print(cond)\n#                                      },\n#                                      finally={})\n#                         }\n#                     }\n#                     if(!is.null(temp.col)){\n#                         count=1\n#                         while(paste0(\"date\",count)%in%colnames(get.data.set())){\n#                             count = count+1\n#                         }\n#                         values$data.set <<- cbind(get.data.set(),date.column.temp=round(temp.col,2))\n#                         colnames(get.data.set())[which(colnames(get.data.set())%in%\"date.column.temp\")] <<- paste0(\"date\",count)\n#                         updateSelectInput(session=session,inputId=\"sel.compare.dates\",selected=\"\",choices=colnames(get.data.set()))\n#                     }\n#                 }\n#             })\n#         }\n#     })\n# \n#     output$comp.dates.table = renderDataTable({\n#         columns = input$sel.compare.dates[1:2]\n#         ret = NULL\n#         if(!is.null(get.data.set())){\n#             ret = get.data.set()[,test.for.dates(get.data.set())]\n#             if(ncol(ret)==0){\n#                 ret = NULL\n#             }\n#             if(!is.null(columns)&&columns[1]!=\"\"){\n#                 temp.col = NULL\n#                 for(col in 1:length(columns)){\n#                     if(col==1){\n#                         tryCatch({\n#                             temp.col = as.numeric(as.Date(get.data.set()[,columns[col]], origin = \"1900-01-01\"))\n#                         },\n#                                  error=function(cond) {\n#                                      temp.col = NULL\n#                                  },\n#                                  warning=function(cond) {\n#                                      print(cond)\n#                                  },\n#                                  finally={})\n#                     }else{\n#                         tryCatch({\n#                             temp.col = temp.col - as.numeric(as.Date(get.data.set()[,columns[col]], origin = \"1900-01-01\"))\n#                         },\n#                                  error=function(cond) {\n#                                      temp.col = NULL\n#                                  },\n#                                  warning=function(cond) {\n#                                      print(cond)\n#                                  },\n#                                  finally={})\n#                     }\n#                 }\n#                 if(!is.null(temp.col)){\n#                     ret = cbind(ret,temp.date=round(temp.col,2))\n#                 }\n#             }\n#         }\n#         ret\n#     },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n# \n#     output$compare.dates = renderUI({\n#         input$selector\n#         compare.dates.panel()\n#     })\n\n    ##  modify -> add columns : paste in data to add as additional column.\n    observe({\n        input$add_column\n        isolate({\n          temp=get.data.set()\n          if(!is.null(get.data.set())&&!is.null(input$new.column)&&input$add_column>0){\n              colu = strsplit(input$new.column,\"\\n\",fixed=T)[[1]]\n              if(length(colu)==1){\n                  colu = strsplit(input$new.column,\",\",fixed=T)[[1]]\n              }\n              if(length(colu)<nrow(get.data.set())){\n                  colu = rep(colu,length.out=nrow(get.data.set()))\n              }\n              if(length(colu)>nrow(get.data.set())){\n                  colu = colu[1:nrow(get.data.set())]\n              }\n              NAs = which(is.na(colu))\n              if(length(NAs)>0&&length(colu[-NAs])>0){\n                  temp.colu = as.numeric(colu[-NAs])\n                  if(!any(is.na(temp.colu))){\n                      colu = as.numeric(colu)\n                  }\n              }\n              count = 1\n              name = \"add.column1\"\n              while(name%in%colnames(get.data.set())){\n                  count =  count +1\n                  name = paste0(\"add.column\",count)\n              }\n              temp = cbind(get.data.set(),temp.column=colu)\n              colnames(temp)[which(colnames(temp)%in%\"temp.column\")] = name\n              temp\n          }\n          values$data.set = temp\n          updateTextInput(session, inputId=\"new.column\", value=\"\")\n        })\n    })\n\n    output$add.table = renderDataTable({\n      temp=get.data.set()\n      input$new.column\n      input$add_column\n      isolate({\n        if(!is.null(get.data.set())&&!is.null(input$new.column)){\n            colu = strsplit(input$new.column,\"\\n\",fixed=T)[[1]]\n            if(length(colu)==1){\n                colu = strsplit(input$new.column,\",\",fixed=T)[[1]]\n            }\n            if(length(colu)<nrow(get.data.set())){\n                colu = rep(colu,length.out=nrow(get.data.set()))\n            }\n            if(length(colu)>nrow(get.data.set())){\n                colu = colu[1:nrow(get.data.set())]\n            }\n            NAs = which(is.na(colu))\n            if(length(NAs)>0&&length(colu[-NAs])>0){\n                temp.colu = as.numeric(colu[-NAs])\n                if(!any(is.na(temp.colu))){\n                    colu = as.numeric(colu)\n                }\n            }\n            count = 1\n            name = \"add.column1\"\n            while(name%in%colnames(get.data.set())){\n                count =  count +1\n                name = paste0(\"add.column\",count)\n            }\n            temp = cbind(get.data.set(),temp.column=colu)\n            colnames(temp)[which(colnames(temp)%in%\"temp.column\")] = name\n            temp\n        }\n        temp\n      })\n    },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n    output$add.columns = renderUI({\n        add.columns.panel()\n    })\n\n    ##  modify -> remove columns : remove selected columns from the data.\n\n    observe({\n        input$rem_column\n        if(!is.null(get.data.set())&&!is.null(input$rem_column)&&input$rem_column>0){\n            isolate({\n                if(length(which(colnames(get.data.set())%in%input$select.remove.column))>0){\n                    values$data.set = as.data.frame(get.data.set()[,-which(colnames(get.data.set())%in%input$select.remove.column)])\n                    if(ncol(get.data.set())==0){\n                        values$data.set = NULL\n                        updateSelectInput(session, inputId=\"select.remove.column\",choices=c(\"\"),selected=\"\")\n                    }else{\n                        updateSelectInput(session, inputId=\"select.remove.column\", choices=colnames(get.data.set()),selected=\"\")\n                    }\n                }\n            })\n        }\n    })\n\n    output$rem.col.table = renderDataTable({\n      temp = get.data.set()\n      input$rem_column\n      isolate({\n        if(!is.null(get.data.set())&&!is.null(input$select.remove.column)){\n            temp = as.data.frame(get.data.set()[,-which(colnames(get.data.set())%in%input$select.remove.column)])\n            if(ncol(temp)==0){\n                temp=NULL\n            }\n        }\n        temp\n      })\n    },options=list(lengthMenu = c(5, 30, 50), pageLength = 5, columns.defaultContent=\"NA\",scrollX=T))\n\n    output$remove.columns = renderUI({\n        remove.columns.panel(get.data.set())\n    })\n\n    ##--------------------##\n    ##  Visualize Module  ##\n    ##--------------------##\n    source(\"panels/5_Visualize/1_visualize-panel-ui.R\", local = TRUE)\n    source(\"panels/5_Visualize/2_visualize-panel-server.R\", local = TRUE)\n    output$visualize.panel <- renderUI({\n        visualize.panel.ui(get.data.set())\n    })\n\n#   Advanced --> Time Series\n\n    ##----------------------##\n    ##  Time Series Module  ##\n    ##----------------------##\n    source(\"panels/6_TimeSeries/1_timeseries-panel-ui.R\", local = TRUE)\n    source(\"panels/6_TimeSeries/2_timeseries-panel-server.R\", local = TRUE)\n    output$timeseries.panel <- renderUI({\n        timeseries.panel.ui(get.data.set())\n    })\n\n#   Advanced --> Quick explore\n\n  output$quick.explore = renderUI({\n    quick.explore.panel(get.data.set())\n  })\n\n#   Advanced --> Quick explore --> Data summary\n\n  output$quick.summary.side = renderUI({\n    get.quick.summary.sidebar(get.data.set())\n  })\n  \n  output$quick.summary.main = renderUI({\n    get.quick.summary.main()\n  })\n\n  output$all.summary = renderPrint({\n    data.summary(get.data.set())\n  })\n  \n  output$column.summary = renderPrint({\n    if(!is.null(input$select.column.sum)){\n      temp = get.data.set()[,which(colnames(get.data.set())%in%input$select.column.sum)]\n      if(is.character(temp)){\n        print(as.factor(temp))\n        cat(\"\\n\\t\")\n        print(summary(as.factor(temp)))\n      }else{\n        print(summary(temp))\n      }\n    }else{\n      NULL\n    }\n  })\n\n#   Advanced --> Quick explore --> Single Column plot\n\n  output$single.column.plot.side= renderUI({\n    get.single.col.sidebar(get.data.set())\n  })\n\n  output$single.column.plot.main= renderUI({\n    get.single.col.main(get.data.set())\n  })\n\n  observe({\n    input$single.backward\n    isolate({\n      if(!is.null(input$single.backward)&&input$single.backward>0){\n        index=1\n        if(which(colnames(get.data.set())%in%input$select.column.plot)==1){\n          index=ncol(get.data.set())\n        }else{\n          index = which(colnames(get.data.set())%in%input$select.column.plot)-1\n        }\n        updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(get.data.set()),selected=colnames(get.data.set())[index])\n        updateSliderInput(session,inputId=\"single.play\",value=index)\n      }\n    })\n  })\n\n  observe({\n    input$single.forward\n    isolate({\n      if(!is.null(input$single.forward)&&input$single.forward>0){\n        index=1\n        if(which(colnames(get.data.set())%in%input$select.column.plot)==ncol(get.data.set())){\n          index=1\n        }else{\n          index = which(colnames(get.data.set())%in%input$select.column.plot)+1\n        }\n        updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(get.data.set()),selected=colnames(get.data.set())[index])\n        updateSliderInput(session,inputId=\"single.play\",value=index)\n      }\n    })\n  })\n\n  observe({\n    input$single.play\n    isolate({\n      if(!is.null(input$single.play)){\n        updateSelectInput(session,inputId=\"select.column.plot\",choices=colnames(get.data.set()),selected=colnames(get.data.set())[input$single.play])\n      }\n    })\n  })\n\n  output$column.plot = renderPlot({\n    input$select.column.plot\n    isolate({\n      if(!is.null(get.data.set())&&!is.null(input$select.column.plot)){\n        index=which(colnames(get.data.set())%in%input$select.column.plot)\n        if(length(index)==0){\n          index = 1\n        }\n        updateSliderInput(session,inputId=\"single.play\",value=index)\n        temp = get.data.set()[,index]\n        if(is.character(temp)){\n            temp = as.factor(temp)\n        }\n        iNZightPlot(temp,xlab=input$select.column.plot,main=get.data.name())\n      }\n    })\n  })\n\n#   Advanced --> Quick explore --> Column pair plot\n\n  output$column.pair.plot.side = renderUI({\n    get.pair.plot.sidebar(get.data.set())\n  })\n\n  output$column.pair.plot.main = renderUI({\n    get.pair.plot.main(get.data.set())\n  })\n\n  observe({\n    input$pair.player\n    isolate({\n      if(!is.null(input$pair.player)){\n        indMat = rbind(1:(ncol(get.data.set())*(ncol(get.data.set())-1)),\n                       rep(1:(ncol(get.data.set())-1),ncol(get.data.set())),\n                       ceiling(seq(from=0.1,to=ncol(get.data.set()),by=1/(ncol(get.data.set())-1))))\n        index1 = indMat[3,input$pair.player]\n        index2 = indMat[2,input$pair.player]\n        values$button = T\n        updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(get.data.set())[index1],choices=colnames(get.data.set()))\n        updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(get.data.set())[-index1][index2],\n                          choices=colnames(get.data.set())[-index1])\n      }\n    })\n  })\n\n  observe({\n    input$pair.backward\n    isolate({\n      if(!is.null(input$pair.backward)&&input$pair.backward>0){\n        index1 = which(colnames(get.data.set())%in%input$select.column.plot1)\n        index2 = which(colnames(get.data.set())[-index1]%in%input$select.column.plot2)\n        if(index2==1){\n          if(index1==1){\n            index1 = ncol(get.data.set())\n          }else{\n            index1 = index1-1\n          }\n          values$button = T\n          updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(get.data.set())[index1],choices=colnames(get.data.set()))\n          index2 = ncol(get.data.set())-1\n        }else{\n          index2 = index2-1\n        }\n        updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(get.data.set())[-index1][index2],\n                          choices=colnames(get.data.set())[-index1])\n        matInd = which(colnames(get.data.set())%in%colnames(get.data.set())[-index1][index2])\n        updateSliderInput(session,inputId=\"pair.player\",\n                          value=matrix(c(unlist(lapply(seq(from=ncol(get.data.set()),by=ncol(get.data.set()),\n                                                           to=ncol(get.data.set())*(ncol(get.data.set())-1)),function(x,n){\n                                                             c(0,(x-(n-1)):x)\n                                                           },\n                                                       ncol(get.data.set()))),0),nrow=ncol(get.data.set()))[matInd,index1]\n                          )\n      }\n    })\n  })\n\n    observe({\n      input$pair.forward\n      isolate({\n        if(!is.null(input$pair.forward)&&input$pair.forward>0){\n          index1 = which(colnames(get.data.set())%in%input$select.column.plot1)\n          index2 = which(colnames(get.data.set())[-index1]%in%input$select.column.plot2)\n          if(index2==(ncol(get.data.set())-1)){\n            if(index1==ncol(get.data.set())){\n              index1 = 1\n            }else{\n              index1 = index1+1\n            }\n            values$button = T\n            updateSelectInput(session,inputId=\"select.column.plot1\",selected=colnames(get.data.set())[index1],choices=colnames(get.data.set()))\n            index2 = 1\n          }else{\n            index2 = index2+1\n          }\n          updateSelectInput(session,inputId=\"select.column.plot2\",selected=colnames(get.data.set())[-index1][index2],\n                            choices=colnames(get.data.set())[-index1])\n          matInd = which(colnames(get.data.set())%in%colnames(get.data.set())[-index1][index2])\n          updateSliderInput(session,inputId=\"pair.player\",\n                            value=matrix(c(unlist(lapply(seq(from=ncol(get.data.set()),by=ncol(get.data.set()),\n                                                             to=ncol(get.data.set())*(ncol(get.data.set())-1)),function(x,n){\n                                                               c(0,(x-(n-1)):x)\n                                                             },\n                                                         ncol(get.data.set()))),0),nrow=ncol(get.data.set()))[matInd,index1]\n          )\n        }\n      })\n    })\n\n    observe({\n        input$select.column.plot1\n        isolate({\n          choice = input$select.column.plot1\n          if(!is.null(choice)){\n            i = input$select.column.plot2\n            if(input$select.column.plot1==input$select.column.plot2){\n              i = which(colnames(get.data.set())%in%input$select.column.plot1)\n              if(i>(ncol(get.data.set())-1)){\n                i=1\n              }\n            }\n            ch = colnames(get.data.set())[-which(colnames(get.data.set())%in%choice)]\n            if(!get.button()){\n              updateSelectInput(session,\"select.column.plot2\",choices=ch,\n                                selected=ch[i])  \n            }\n            values$button = F\n          }\n        })\n    })\n\n  output$plot.column.pair = renderPlot({\n    if(!is.null(input$select.column.plot1)&&!is.null(input$select.column.plot2)&&\n         !\"\"%in%input$select.column.plot1&&!\"\"%in%input$select.column.plot2){\n      index1 = which(colnames(get.data.set())%in%input$select.column.plot1)\n      index2 = which(colnames(get.data.set())%in%input$select.column.plot2)\n      if(length(index1)==0){\n        index1 = 1\n      }\n      if(length(index2)==0){\n        if(index1+1>ncol(get.data.set())){\n          index2 = 1\n        }else{\n          index2 = index1 + 1\n        }\n      }\n      x = get.data.set()[,index1]\n      y = get.data.set()[,index2]\n      iNZightPlot(x,y,xlab=input$select.column.plot1,ylab=input$select.column.plot2,main=get.data.name())\n    }\n  })\n\n#   Advanced --> Quick explore --> Compare pairs\n\n  output$compare.pairs.main = renderUI({\n    get.matrix.main(get.data.set())\n  })\n\n  output$compare.pairs.side = renderUI({\n    get.matrix.sidebar(get.data.set())\n  })\n\n  output$plot.matrix = renderPlot({\n      choices = input$select.matrix.plot\n      if(is.null(choices)||length(choices)==1){\n          plot(1, 1, type = \"n\", axes = FALSE, xlab = \"\" , ylab = \"\")\n          text(1, 1, \"You have to select more than 1 variable\", cex = 2)\n      }else{\n          choices.ind = which(colnames(get.data.set()) %in% choices)\n          temp =\n              do.call(cbind,\n                      lapply(get.data.set()[, choices.ind],\n                             function(x) {\n                                 if (is.character(x)) {\n                                     data.frame(factor(x, levels = unique(x)))\n                                 } else {\n                                     data.frame(x)\n                                 }\n                             }))\n          colnames(temp) = choices\n          gpairs(temp)\n      }\n  })\n\n#   Help\n\n    ##---------------##\n    ##  Help Module  ##\n    ##---------------##\n    source(\"panels/7_Help/1_help-panel-ui.R\", local = TRUE)\n    output$help.panel <- renderUI({\n        help.panel.ui(get.lite.version(),get.lite.update())\n    })\n})\n",
    "created" : 1428618125775.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4272813678",
    "id" : "1A66770B",
    "lastKnownWriteTime" : 1428625502,
    "path" : "~/git/Lite/server.R",
    "project_path" : "server.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}